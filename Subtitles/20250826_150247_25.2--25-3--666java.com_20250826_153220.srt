1
00:00:00,000 --> 00:00:02,100
好我们继续演示空间反复度

2
00:00:02,100 --> 00:00:05,919
空间反复度就是程序执行师需要的内存空间

3
00:00:05,919 --> 00:00:07,839
这个会比时间稍微简单一些

4
00:00:07,839 --> 00:00:11,740
因为在前端领域我们是叫重时间轻空间

5
00:00:11,740 --> 00:00:14,919
因为我们前端领域需要程序运行的更快一些

6
00:00:14,919 --> 00:00:17,600
但是空间就是内存空间一般是够用的

7
00:00:17,600 --> 00:00:20,179
因为前端领域大家都是运行在浏览器里面

8
00:00:20,179 --> 00:00:21,539
浏览器现在比较强大

9
00:00:21,539 --> 00:00:23,039
内存空间一般是够用的

10
00:00:23,039 --> 00:00:24,920
然后长线的空间反复度是O1

11
00:00:24,920 --> 00:00:26,800
就是有限的可数的空间

12
00:00:26,800 --> 00:00:27,859
数量级是O1

13
00:00:27,859 --> 00:00:29,160
然后再往下是ON

14
00:00:29,160 --> 00:00:31,940
就是和输入的数据量相同的一个空间

15
00:00:31,940 --> 00:00:34,159
比如说我输入了数组是1万个

16
00:00:34,159 --> 00:00:35,500
1万个元素

17
00:00:35,500 --> 00:00:36,960
那我们需要的空间

18
00:00:36,960 --> 00:00:39,359
就是正好是需要1万个元素的一个空间

19
00:00:39,359 --> 00:00:40,219
这样的

20
00:00:40,219 --> 00:00:42,240
其实这个图和这个是一样的

21
00:00:42,240 --> 00:00:43,140
比如说O1的情况下

22
00:00:43,140 --> 00:00:44,759
我们的输入量很大

23
00:00:44,759 --> 00:00:46,740
但是我们需要的空间是固定的

24
00:00:46,740 --> 00:00:47,179
就那些

25
00:00:47,179 --> 00:00:48,820
反正数量级是O1

26
00:00:48,820 --> 00:00:50,200
但是比如说有可能是一个空间

27
00:00:50,200 --> 00:00:51,140
两个空间三个空间

28
00:00:51,140 --> 00:00:52,420
反正是可数的

29
00:00:52,420 --> 00:00:54,460
给你输入的数据量是没有关系的

30
00:00:54,460 --> 00:00:55,120
然后ON的情况

31
00:00:55,120 --> 00:00:57,620
比如说你输入的数据量是10

32
00:00:57,620 --> 00:00:58,900
那需要的空间就是10

33
00:00:58,899 --> 00:01:00,119
输入的数据量是6

34
00:01:00,119 --> 00:01:01,259
那数据量的空间就是6

35
00:01:01,259 --> 00:01:03,479
就是和你的输入的空间是有关系的

36
00:01:03,479 --> 00:01:04,099
这么一个

37
00:01:04,099 --> 00:01:05,640
像这个logN呢

38
00:01:05,640 --> 00:01:06,799
或者说N的平方呢

39
00:01:06,799 --> 00:01:08,799
在空间复杂度里面用的不是很常见

40
00:01:08,799 --> 00:01:10,340
所以说我们就再把演示一下

41
00:01:10,340 --> 00:01:12,340
比如说我们输入一个数据

42
00:01:12,340 --> 00:01:13,359
空间复杂度

43
00:01:13,359 --> 00:01:14,840
我们如果是O1的话

44
00:01:14,840 --> 00:01:17,019
如果是O1的话

45
00:01:17,019 --> 00:01:17,739
那就是

46
00:01:17,739 --> 00:01:19,980
比如说我们需要一个定一个空间

47
00:01:19,980 --> 00:01:21,420
比如说这个A生意

48
00:01:21,420 --> 00:01:22,780
数据的第一个元素

49
00:01:22,780 --> 00:01:23,739
或者说B

50
00:01:23,739 --> 00:01:25,439
是数据的第二个元素

51
00:01:25,439 --> 00:01:26,719
总之我们就这么写

52
00:01:26,719 --> 00:01:28,700
不要有循环就这么写

53
00:01:28,700 --> 00:01:29,859
平铺直序的写

54
00:01:29,859 --> 00:01:31,239
写100个也没关系

55
00:01:31,239 --> 00:01:33,000
它的空间复杂度都是O1

56
00:01:33,000 --> 00:01:34,799
因为它只是定义了一个变量

57
00:01:34,799 --> 00:01:35,280
两个变量

58
00:01:35,280 --> 00:01:35,799
三个变量

59
00:01:35,799 --> 00:01:36,299
这样的

60
00:01:36,299 --> 00:01:38,439
和你输入的数据有多少个

61
00:01:38,439 --> 00:01:39,060
没有关系

62
00:01:39,060 --> 00:01:40,379
因为程序是净它的

63
00:01:40,379 --> 00:01:41,519
是固定的

64
00:01:41,519 --> 00:01:43,259
所以这是O1的一个空间复杂度

65
00:01:43,259 --> 00:01:44,400
什么是O1呢

66
00:01:44,400 --> 00:01:46,719
比如说我们输入一个O1

67
00:01:46,719 --> 00:01:47,939
我们输入一个数据

68
00:01:47,939 --> 00:01:50,299
然后我们需要定义另外一个数据

69
00:01:50,299 --> 00:01:52,519
然后定义另外一个数据呢

70
00:01:52,519 --> 00:01:54,420
我们再把这个另外一个

71
00:01:54,420 --> 00:01:57,079
就是我们去循环这个数据也好

72
00:01:57,079 --> 00:01:58,359
直接去拷贝也好

73
00:01:58,359 --> 00:01:59,859
我们就写循环吧

74
00:01:59,859 --> 00:02:03,519
for let's i 复制成零

75
00:02:03,519 --> 00:02:04,759
i 小于

76
00:02:04,759 --> 00:02:07,159
数据的长度

77
00:02:07,159 --> 00:02:09,000
i 加价

78
00:02:09,000 --> 00:02:11,340
然后这个时候我们把

79
00:02:11,340 --> 00:02:13,159
这个数据的元素

80
00:02:13,159 --> 00:02:14,259
我们直接去

81
00:02:14,259 --> 00:02:15,400
应该是i

82
00:02:15,400 --> 00:02:18,939
直接去复制到这个数据2里面

83
00:02:18,939 --> 00:02:20,639
然后去再去做

84
00:02:20,640 --> 00:02:22,400
其他一些操作对吧

85
00:02:22,400 --> 00:02:23,300
所以这个时候大家看一下

86
00:02:23,300 --> 00:02:25,520
我们当输入一个数据的时候

87
00:02:25,520 --> 00:02:27,780
这个数据的这个长度

88
00:02:27,780 --> 00:02:29,360
就影响了空间

89
00:02:29,360 --> 00:02:30,000
为什么呢

90
00:02:30,000 --> 00:02:31,440
因为我们定义了另外一个数据

91
00:02:31,440 --> 00:02:32,380
这个数据呢

92
00:02:32,380 --> 00:02:34,720
它是拷贝了这个数据的一个东西

93
00:02:34,720 --> 00:02:36,300
比如说不一定拷贝啊

94
00:02:36,300 --> 00:02:38,140
比如说这个数据每个都加10

95
00:02:38,140 --> 00:02:40,220
然后复制给这个第二个数据

96
00:02:40,220 --> 00:02:41,700
总之这个是有用的对吧

97
00:02:41,700 --> 00:02:43,620
这个后面程序我们就不在写了

98
00:02:43,620 --> 00:02:45,100
然后我们表示的意思就是说

99
00:02:45,100 --> 00:02:47,560
我们在执行这个函数的时候呢

100
00:02:47,560 --> 00:02:49,700
我们传入的这个数据的数据量

101
00:02:49,700 --> 00:02:52,060
它的长度和我们占用的空间

102
00:02:52,060 --> 00:02:53,480
是有关系的

103
00:02:53,480 --> 00:02:54,720
比如说这个长度是多少

104
00:02:54,720 --> 00:02:55,840
我们需要占用多少空间

105
00:02:55,840 --> 00:02:57,180
这种空间复杂度是

106
00:02:57,180 --> 00:02:58,380
ON的一个例子

107
00:02:58,380 --> 00:02:59,480
这个很常见

108
00:02:59,480 --> 00:03:01,480
有时候比如说我们处理一个数据啊

109
00:03:01,480 --> 00:03:02,880
我们先定一个空数据

110
00:03:02,880 --> 00:03:04,040
然后处理完之后呢

111
00:03:04,040 --> 00:03:05,540
再把这个空数据返回

112
00:03:05,540 --> 00:03:06,640
这个很常见对吧

113
00:03:06,640 --> 00:03:08,580
这样的话就是ON的一个空间复杂度

114
00:03:08,580 --> 00:03:10,040
这是比较常见的

115
00:03:10,040 --> 00:03:10,860
演示完之后呢

116
00:03:10,860 --> 00:03:11,740
我们再给我说一下

117
00:03:11,740 --> 00:03:14,880
程序员是必须掌握算法复杂度的

118
00:03:14,880 --> 00:03:16,460
不管是前端还是后端

119
00:03:16,460 --> 00:03:18,820
因为这个算法的这个面试题啊

120
00:03:18,820 --> 00:03:21,360
一开始在后端和后端的这个面试里面

121
00:03:21,360 --> 00:03:22,080
是经常考的

122
00:03:22,080 --> 00:03:23,300
因为他们呢

123
00:03:23,300 --> 00:03:24,800
就是对这个算法要求比较高一些

124
00:03:24,800 --> 00:03:26,540
然后前端最近几年

125
00:03:26,540 --> 00:03:27,760
这个中心越来越多

126
00:03:27,760 --> 00:03:28,740
然后做的越来越广

127
00:03:28,740 --> 00:03:30,640
然后算法才慢慢开始考的

128
00:03:30,640 --> 00:03:31,700
所以说现在看来

129
00:03:31,700 --> 00:03:33,480
所有的程序员都必须掌握算法复杂度

130
00:03:33,480 --> 00:03:36,080
如果是说你没有复杂度的概念

131
00:03:36,080 --> 00:03:37,159
或者说敏感度

132
00:03:37,159 --> 00:03:37,920
这个词很重要

133
00:03:37,920 --> 00:03:39,219
叫敏感度

134
00:03:39,219 --> 00:03:40,500
就你看到一个算法之后

135
00:03:40,500 --> 00:03:41,420
你要下意识的觉得

136
00:03:41,420 --> 00:03:43,120
这个算法的复杂度行不行

137
00:03:43,120 --> 00:03:44,960
你要有这么一个下意识的感觉

138
00:03:44,960 --> 00:03:45,980
条件反射

139
00:03:45,980 --> 00:03:47,480
然后如果你没有这个的话呢

140
00:03:47,480 --> 00:03:48,939
写程序是非常危险的

141
00:03:48,939 --> 00:03:50,379
你很有可能写出什么呢

142
00:03:50,379 --> 00:03:52,580
写出一些功能上看似可以

143
00:03:52,580 --> 00:03:53,700
但是以运行

144
00:03:53,700 --> 00:03:54,939
或者说数据量一大

145
00:03:54,939 --> 00:03:56,080
就崩溃的一个效果

146
00:03:56,080 --> 00:03:57,860
大家去看看之前那个图

147
00:03:57,860 --> 00:03:58,520
例如

148
00:03:58,520 --> 00:03:59,640
就是刚才说的

149
00:03:59,640 --> 00:04:00,520
功能测试没有问题

150
00:04:00,520 --> 00:04:01,259
但是呢

151
00:04:01,259 --> 00:04:02,420
数据量一大就崩溃了

152
00:04:02,420 --> 00:04:03,819
尤其对于前端呢

153
00:04:03,819 --> 00:04:05,099
我们是重

154
00:04:05,099 --> 00:04:05,800
时间

155
00:04:05,800 --> 00:04:06,719
轻空间

156
00:04:06,719 --> 00:04:08,360
所以特别是时间复杂度

157
00:04:08,360 --> 00:04:09,560
我们一定要注意

158
00:04:09,560 --> 00:04:10,680
空间复杂度呢

159
00:04:10,680 --> 00:04:11,599
一般情况下

160
00:04:11,599 --> 00:04:12,659
不会有什么大的问题

161
00:04:12,659 --> 00:04:13,599
因为你不可能

162
00:04:13,599 --> 00:04:14,579
占用太多的空间

163
00:04:14,579 --> 00:04:15,759
而且前端的空间呢

164
00:04:15,759 --> 00:04:16,920
也是比较充裕的

165
00:04:16,920 --> 00:04:18,560
空间复杂度一般是对于什么呢

166
00:04:18,560 --> 00:04:19,839
那些做后端

167
00:04:19,839 --> 00:04:21,040
做嵌溃式开发的

168
00:04:21,040 --> 00:04:22,879
因为他们的这个小型机

169
00:04:22,879 --> 00:04:24,379
或者小型的内存的比较小

170
00:04:24,379 --> 00:04:25,719
所以说他们要节省的用

171
00:04:25,719 --> 00:04:26,920
但是对于前端来说

172
00:04:26,920 --> 00:04:27,980
这个问题不大

173
00:04:27,980 --> 00:04:29,379
但是我们的时间复杂度

174
00:04:29,379 --> 00:04:30,480
是很虚的

175
00:04:30,480 --> 00:04:31,980
因为我们经常做什么

176
00:04:31,980 --> 00:04:32,480
性能优化

177
00:04:32,480 --> 00:04:32,899
性能优化

178
00:04:32,899 --> 00:04:33,339
性能优化

179
00:04:33,339 --> 00:04:34,339
要压缩时间

180
00:04:34,339 --> 00:04:36,399
所以说这个时间是很重要的

181
00:04:36,399 --> 00:04:37,720
我们再看这个图啊

182
00:04:37,720 --> 00:04:38,120
比如说

183
00:04:38,120 --> 00:04:39,560
你如果写了一个算法

184
00:04:39,560 --> 00:04:40,720
它的时间复杂度

185
00:04:40,720 --> 00:04:42,080
到了这个n的平方

186
00:04:42,080 --> 00:04:44,360
这个算法基本上不可用的

187
00:04:44,360 --> 00:04:45,060
我们就从这个图中

188
00:04:45,060 --> 00:04:45,620
就可以看出来

189
00:04:45,620 --> 00:04:46,780
输入的量

190
00:04:46,780 --> 00:04:47,980
一旦增大

191
00:04:47,980 --> 00:04:49,820
你这个算法的量会飙升

192
00:04:49,820 --> 00:04:51,020
一直到上天

193
00:04:51,020 --> 00:04:52,040
我们刚才说过

194
00:04:52,040 --> 00:04:53,600
如果输入量是一万的话

195
00:04:53,600 --> 00:04:55,380
你的计算量就会到一个亿

196
00:04:55,380 --> 00:04:57,120
这是一个非常恐怖的一个概念

197
00:04:57,120 --> 00:04:57,860
所以说

198
00:04:57,860 --> 00:04:59,680
我们最好是能把自己的

199
00:04:59,680 --> 00:05:00,600
算法的时间复杂度

200
00:05:00,600 --> 00:05:01,620
控制在什么呢

201
00:05:01,620 --> 00:05:03,200
控制在这个on这个级别

202
00:05:03,200 --> 00:05:04,400
当然有少一部分

203
00:05:04,400 --> 00:05:06,020
会到这个n乘以logn

204
00:05:06,020 --> 00:05:07,540
但是大部分我们要控制到

205
00:05:07,540 --> 00:05:08,280
on这个级别

206
00:05:08,280 --> 00:05:09,780
最好是能控制在这个

207
00:05:09,780 --> 00:05:11,000
logn这个级别

208
00:05:11,000 --> 00:05:12,420
如果能到logn级别

209
00:05:12,420 --> 00:05:13,340
那就非常非常好了

210
00:05:13,340 --> 00:05:15,000
我们在本章里面会

211
00:05:15,000 --> 00:05:15,940
专门讲一节

212
00:05:15,940 --> 00:05:17,300
讲这个二大数

213
00:05:17,300 --> 00:05:18,080
二大数

214
00:05:18,080 --> 00:05:19,340
它存在了一个根本

215
00:05:19,340 --> 00:05:20,220
就是因为

216
00:05:20,220 --> 00:05:22,000
我们想把所有的操作

217
00:05:22,000 --> 00:05:23,800
都控制在这个logn这个级别

218
00:05:23,800 --> 00:05:26,580
当然你要想到这个o1级别

219
00:05:26,580 --> 00:05:27,680
那就有点痴心妄想了

220
00:05:27,680 --> 00:05:27,880
对吧

221
00:05:27,880 --> 00:05:29,780
我们不可能所有的算法都到o1级别

222
00:05:29,780 --> 00:05:31,240
这个是非常少的

223
00:05:31,240 --> 00:05:32,620
但是能到logn级别

224
00:05:32,620 --> 00:05:33,900
就是已经非常好了

225
00:05:33,900 --> 00:05:35,440
但是有些到n级别

226
00:05:35,440 --> 00:05:36,380
也是可以的

227
00:05:36,380 --> 00:05:38,140
但千万不要到这个n的平方

228
00:05:38,139 --> 00:05:39,479
甚至n的三次方

229
00:05:39,479 --> 00:05:40,959
甚至2的n次方

230
00:05:40,959 --> 00:05:41,919
这就太恐怖了

231
00:05:41,919 --> 00:05:43,560
因为我们后面会讲一个叫

232
00:05:43,560 --> 00:05:45,199
非不大器数列的一个算法

233
00:05:45,199 --> 00:05:46,899
如果我们默认情况下做的话

234
00:05:46,899 --> 00:05:48,259
它就到了2的n次方

235
00:05:48,259 --> 00:05:49,079
大家注意啊

236
00:05:49,079 --> 00:05:50,019
是2的n次方

237
00:05:50,019 --> 00:05:51,120
不是n的2次方

238
00:05:51,120 --> 00:05:52,699
2的n次方更加恐怖啊

239
00:05:52,699 --> 00:05:55,079
所以那个算法是完全不可用的

240
00:05:55,079 --> 00:05:56,360
一到了数量级以上

241
00:05:56,360 --> 00:05:57,300
它就程序就崩溃

242
00:05:57,300 --> 00:05:59,300
我们可以回顾一个

243
00:05:59,300 --> 00:06:02,659
就是我们家里要讲的一个事情啊

244
00:06:02,659 --> 00:06:03,639
当然有些同学可能知道

245
00:06:03,639 --> 00:06:05,819
就是我们这个VDOM

246
00:06:05,819 --> 00:06:08,539
就是react或view里面的这个VDOM啊

247
00:06:08,539 --> 00:06:11,339
VDOM这个数的一个div算法

248
00:06:11,339 --> 00:06:13,360
我们之前其实在其他课程

249
00:06:13,360 --> 00:06:14,139
我们也讲过这个问题

250
00:06:14,139 --> 00:06:17,300
就是普通的这个数的div算法呢

251
00:06:17,300 --> 00:06:18,159
它的时间复杂度呢

252
00:06:18,159 --> 00:06:20,339
是应该是on的三次方

253
00:06:20,340 --> 00:06:21,360
这个为什么呢

254
00:06:21,360 --> 00:06:22,280
我们后面会说

255
00:06:22,280 --> 00:06:23,620
我们这儿先不做考究

256
00:06:23,620 --> 00:06:25,040
只是这么说啊

257
00:06:25,040 --> 00:06:26,060
这个on的三次方

258
00:06:26,060 --> 00:06:26,980
这个时间法度

259
00:06:26,980 --> 00:06:27,800
大家觉得可用吗

260
00:06:27,800 --> 00:06:29,600
完全完全不可用啊

261
00:06:29,600 --> 00:06:31,320
这个是很容易崩溃的一个事情

262
00:06:31,320 --> 00:06:32,220
大家想一下

263
00:06:32,220 --> 00:06:33,240
我的算法

264
00:06:33,240 --> 00:06:34,260
n的三次方

265
00:06:34,260 --> 00:06:35,380
这个就不得了

266
00:06:35,380 --> 00:06:35,960
对吧

267
00:06:35,960 --> 00:06:37,380
这个输入量稍微大一点

268
00:06:37,380 --> 00:06:38,220
这个程序就崩溃

269
00:06:38,220 --> 00:06:39,240
那所以怎么办

270
00:06:39,240 --> 00:06:41,400
所以react最先提出

271
00:06:41,400 --> 00:06:45,280
要去优化VDOM的一个treative算法

272
00:06:45,280 --> 00:06:46,460
它优化完之后呢

273
00:06:46,460 --> 00:06:48,040
是on

274
00:06:48,040 --> 00:06:50,120
大家看一下

275
00:06:50,120 --> 00:06:51,259
从n的三次方

276
00:06:51,259 --> 00:06:51,899
到了n

277
00:06:51,899 --> 00:06:53,000
到这个级别

278
00:06:53,000 --> 00:06:54,600
那我们的代码就可以了

279
00:06:54,600 --> 00:06:56,139
所以这个例子

280
00:06:56,139 --> 00:06:57,920
当然为什么大家先不用管它

281
00:06:57,920 --> 00:07:00,439
你看这两个关键词就可以了

282
00:07:00,439 --> 00:07:00,959
这个例子

283
00:07:00,959 --> 00:07:02,720
就非常能结合我们这个图

284
00:07:02,720 --> 00:07:03,680
去说明一个问题

285
00:07:03,680 --> 00:07:04,519
化重点

286
00:07:04,519 --> 00:07:05,579
第一个

287
00:07:05,579 --> 00:07:06,439
算法辅导度

288
00:07:06,439 --> 00:07:07,420
是学习算法的基础

289
00:07:07,420 --> 00:07:07,920
非常重要

290
00:07:07,920 --> 00:07:08,800
理解不了

291
00:07:08,800 --> 00:07:09,500
就背诵

292
00:07:09,500 --> 00:07:10,800
这两件理解不了

293
00:07:10,800 --> 00:07:11,360
就背诵

294
00:07:11,360 --> 00:07:12,959
然后你要把图画出来

295
00:07:12,959 --> 00:07:14,240
去背过

296
00:07:14,240 --> 00:07:15,399
以及它的代码表现

297
00:07:15,399 --> 00:07:16,399
先去背诵

298
00:07:16,399 --> 00:07:17,180
当然背诵

299
00:07:17,180 --> 00:07:18,500
不是说让你一直背

300
00:07:18,500 --> 00:07:19,899
被诵完之后呢

301
00:07:19,899 --> 00:07:20,779
你这一章看完之后

302
00:07:20,779 --> 00:07:21,560
你就可以去理解

303
00:07:21,560 --> 00:07:24,199
然后复杂度是数量级

304
00:07:24,199 --> 00:07:26,120
要用on来表示

305
00:07:26,120 --> 00:07:28,240
内部是一个函数北达式

306
00:07:28,240 --> 00:07:29,639
函数北达式是什么意思呢

307
00:07:29,639 --> 00:07:31,839
就是像这个1是不是一个函数

308
00:07:31,839 --> 00:07:33,079
logn是不是函数

309
00:07:33,079 --> 00:07:34,199
n也是函数

310
00:07:34,199 --> 00:07:35,779
然后n乘logn

311
00:07:35,779 --> 00:07:36,399
以及n的平方

312
00:07:36,399 --> 00:07:37,079
都是一个函数

313
00:07:37,079 --> 00:07:37,519
对不对

314
00:07:37,519 --> 00:07:38,519
我们上学的时候

315
00:07:38,519 --> 00:07:39,319
我们经常学嘛

316
00:07:39,319 --> 00:07:40,779
比如说一个函数

317
00:07:40,779 --> 00:07:41,680
这个函数呢

318
00:07:41,680 --> 00:07:43,740
就是这样的

319
00:07:43,740 --> 00:07:44,900
这样的函数的曲线

320
00:07:44,900 --> 00:07:45,759
是什么样的

321
00:07:45,759 --> 00:07:46,139
这个曲线

322
00:07:46,139 --> 00:07:47,340
就是这样的一个曲线

323
00:07:47,340 --> 00:07:48,939
如果一个函数

324
00:07:48,939 --> 00:07:51,379
它是这样的

325
00:07:51,379 --> 00:07:52,879
n的平方

326
00:07:52,879 --> 00:07:53,920
那它的曲线呢

327
00:07:53,920 --> 00:07:55,139
就这么一个曲线

328
00:07:55,139 --> 00:07:55,740
对吧

329
00:07:55,740 --> 00:07:56,540
这是我们上学的时候

330
00:07:56,540 --> 00:07:57,879
学的数学的一个初中生

331
00:07:57,879 --> 00:07:59,060
就可以学的一个函数

332
00:07:59,060 --> 00:08:00,060
这个很好理解

333
00:08:00,060 --> 00:08:01,699
继续

334
00:08:01,699 --> 00:08:03,060
数量级这个词很重要

335
00:08:03,060 --> 00:08:03,579
继续

336
00:08:03,579 --> 00:08:04,360
小胆开发

337
00:08:04,360 --> 00:08:05,399
重时间

338
00:08:05,399 --> 00:08:06,460
轻空间

339
00:08:06,460 --> 00:08:07,199
大家注意

340
00:08:07,199 --> 00:08:07,960
重时间

341
00:08:07,960 --> 00:08:08,480
轻空间

342
00:08:08,480 --> 00:08:09,540
时间反处都尤其重要

343
00:08:09,540 --> 00:08:10,740
所以我们在面试的时候

344
00:08:10,740 --> 00:08:12,100
有可能根本就不考

345
00:08:12,100 --> 00:08:12,720
你空间反处

346
00:08:12,720 --> 00:08:13,879
然后顺来就抓你

347
00:08:13,879 --> 00:08:14,420
时间反处

348
00:08:14,420 --> 00:08:14,960
时间反处

349
00:08:14,960 --> 00:08:16,800
你如果是搞不定

350
00:08:16,800 --> 00:08:17,759
那sorry

351
00:08:17,759 --> 00:08:18,379
抱歉

352
00:08:18,379 --> 00:08:18,800
不要你

353
00:08:18,800 --> 00:08:19,360
OK

354
00:08:19,360 --> 00:08:20,360
我们花了大概

355
00:08:20,360 --> 00:08:21,280
20分钟的时间

356
00:08:21,280 --> 00:08:22,740
我们讲了讲

357
00:08:22,740 --> 00:08:23,560
这个时间反处

358
00:08:23,560 --> 00:08:24,240
空间反处

359
00:08:24,240 --> 00:08:25,100
这是我们

360
00:08:25,100 --> 00:08:26,060
这样的一个基础

361
00:08:26,060 --> 00:08:27,019
我们不讲不行

362
00:08:27,019 --> 00:08:27,879
所以说

363
00:08:27,879 --> 00:08:28,780
还是那句话

364
00:08:28,780 --> 00:08:29,819
必须要去

365
00:08:29,819 --> 00:08:30,680
先掌握这个

366
00:08:30,680 --> 00:08:31,379
再学习本章

367
00:08:31,379 --> 00:08:32,399
如果理解不了

368
00:08:32,399 --> 00:08:33,180
就先背诵

369
00:08:33,180 --> 00:08:34,519
一定要知道这个图

370
00:08:34,519 --> 00:08:35,639
一定要把那个图画出来

371
00:08:35,639 --> 00:08:36,600
然后一定要知道

372
00:08:36,600 --> 00:08:37,659
每个时间反处

373
00:08:37,659 --> 00:08:38,399
和它的代码

374
00:08:38,399 --> 00:08:39,320
之间的一个关系

375
00:08:39,320 --> 00:08:40,700
比如说一次循环

376
00:08:40,700 --> 00:08:41,360
没有循环

377
00:08:41,360 --> 00:08:42,120
还是千套循环

378
00:08:42,120 --> 00:08:42,720
还是二分

379
00:08:42,720 --> 00:08:44,300
这个一定要搞清楚

380
00:08:44,300 --> 00:08:44,860
才行

381
00:08:44,860 --> 00:08:46,280
然后我们学习本章

382
00:08:46,280 --> 00:08:47,140
就没有什么压力

383
00:08:47,139 --> 00:08:48,139
就没有什么压力

384
00:08:48,139 --> 00:08:48,519
就没有什么压力

385
00:08:48,519 --> 00:08:49,039
就没有什么压力

386
00:08:49,039 --> 00:08:49,600
就没有什么压力

387
00:08:49,600 --> 00:08:50,139
就没有什么压力

388
00:08:50,139 --> 00:08:50,519
就没有什么压力

389
00:08:50,519 --> 00:08:51,100
就没有什么压力

390
00:08:51,100 --> 00:08:52,039
就没有什么压力

391
00:08:52,039 --> 00:08:52,519
就没有什么压力

392
00:08:52,519 --> 00:08:53,100
就没有什么压力

393
00:08:53,100 --> 00:08:54,100
就没有什么压力

394
00:08:54,100 --> 00:08:54,600
就没有什么压力

395
00:08:54,600 --> 00:08:55,139
就没有什么压力

396
00:08:55,139 --> 00:08:55,980
就没有什么压力

397
00:08:55,980 --> 00:08:56,240
就没有什么压力

398
00:08:56,240 --> 00:08:56,939
就没有什么压力

399
00:08:56,939 --> 00:08:58,039
就没有什么压力

400
00:08:58,039 --> 00:08:58,639
就没有什么压力

401
00:08:58,639 --> 00:08:59,039
就没有压力

402
00:08:59,039 --> 00:09:00,039
就没有压力

403
00:09:00,039 --> 00:09:00,480
就没有压力

404
00:09:00,480 --> 00:09:01,039
就没有压力

405
00:09:01,039 --> 00:09:02,039
就没有压力

406
00:09:02,039 --> 00:09:03,039
就没有压力

