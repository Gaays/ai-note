WEBVTT

00:00:00.000 --> 00:00:02.100
好 我们继续演示空间反复度

00:00:02.100 --> 00:00:03.320
空间反复度就是

00:00:03.320 --> 00:00:05.900
程序执行师需要的内存空间

00:00:05.900 --> 00:00:07.839
这个会比时间稍微简单一些

00:00:07.839 --> 00:00:09.320
因为在前端领域

00:00:09.320 --> 00:00:11.740
我们是叫重时间轻空间

00:00:11.740 --> 00:00:14.919
因为我们前端领域需要程序运行的更快一些

00:00:14.919 --> 00:00:16.519
但是空间就是内存空间

00:00:16.519 --> 00:00:17.620
一般是够用的

00:00:17.620 --> 00:00:18.539
因为前端领域

00:00:18.539 --> 00:00:20.179
大家都是运行在浏览器里面

00:00:20.179 --> 00:00:21.539
浏览器现在比较强大

00:00:21.539 --> 00:00:23.039
内存空间一般是够用的

00:00:23.039 --> 00:00:24.940
然后长期的空间反复度是O1

00:00:24.940 --> 00:00:26.839
就是有限的可数的空间

00:00:26.839 --> 00:00:27.900
数量级是O1

00:00:27.900 --> 00:00:29.179
然后再往下是ON

00:00:29.179 --> 00:00:31.960
就是和输入的数据量相同的一个空间

00:00:31.960 --> 00:00:34.179
比如说我输入了数组是一万个

00:00:34.179 --> 00:00:35.519
一万个元素

00:00:35.519 --> 00:00:37.119
那我们需要的空间呢

00:00:37.119 --> 00:00:39.380
就是正好是需要一万个元素的一个空间

00:00:39.380 --> 00:00:40.240
这样的

00:00:40.240 --> 00:00:42.259
其实这个图呢和这个是一样的

00:00:42.259 --> 00:00:43.140
比如说O1的情况下

00:00:43.140 --> 00:00:44.759
我们的输入量很大

00:00:44.759 --> 00:00:46.739
但是呢我们需要的空间是固定的

00:00:46.739 --> 00:00:47.219
就那些

00:00:47.219 --> 00:00:48.820
反正数量级是O1

00:00:48.820 --> 00:00:50.219
但是比如说有可能是一个空间

00:00:50.219 --> 00:00:51.140
两个空间三个空间

00:00:51.140 --> 00:00:52.420
反正是可数的

00:00:52.420 --> 00:00:54.480
给你输入的数据量是没有关系的

00:00:54.480 --> 00:00:55.299
然后ON的情况呢

00:00:55.299 --> 00:00:57.640
比如说你输入的数据量是10

00:00:57.640 --> 00:00:58.899
那需要的空间就是10

00:00:58.899 --> 00:01:00.119
输入的数据量是6

00:01:00.119 --> 00:01:01.259
那数据量的空间就是6

00:01:01.259 --> 00:01:02.539
就是和你的输入的空间

00:01:02.539 --> 00:01:03.500
是有关系的

00:01:03.500 --> 00:01:04.120
这么一个

00:01:04.120 --> 00:01:05.640
像这个logn呢

00:01:05.640 --> 00:01:06.819
或者说n的平方呢

00:01:06.819 --> 00:01:08.799
在空间复杂度里面用的不是很常见

00:01:08.799 --> 00:01:10.359
所以说我们就在那边演示一下

00:01:10.359 --> 00:01:12.359
比如说我们输入一个数组

00:01:12.359 --> 00:01:14.840
空间复杂度我们如果是O1的话

00:01:14.840 --> 00:01:17.019
如果是O1的话

00:01:17.019 --> 00:01:19.060
那就是比如说我们需要一个

00:01:19.060 --> 00:01:19.980
定一个空间

00:01:19.980 --> 00:01:21.420
比如说这个a乘以

00:01:21.420 --> 00:01:22.799
数组的第一个元素

00:01:22.799 --> 00:01:25.460
或者说b是数组的第二个元素

00:01:25.460 --> 00:01:26.719
总之我们就这么写

00:01:26.719 --> 00:01:28.700
不要与循环就这么写

00:01:28.700 --> 00:01:29.859
平铺直序的写

00:01:29.859 --> 00:01:31.239
写100个也没关系

00:01:31.239 --> 00:01:32.980
它的空间复杂度都是O1

00:01:32.980 --> 00:01:34.799
因为它只是定义了一个变量

00:01:34.799 --> 00:01:35.819
两个变量三个变量

00:01:35.819 --> 00:01:37.780
这样的和你输入的数组

00:01:37.780 --> 00:01:39.079
有多少个没有关系

00:01:39.079 --> 00:01:40.480
因为程序是静态的

00:01:40.480 --> 00:01:41.519
是固定的

00:01:41.519 --> 00:01:43.239
所以这是O1的一个空间复杂度

00:01:43.239 --> 00:01:44.400
什么是on呢

00:01:44.400 --> 00:01:46.659
比如说我们输入一个on

00:01:46.659 --> 00:01:47.960
我们输入一个数组

00:01:47.960 --> 00:01:50.299
然后我们需要定义另外一个数组

00:01:50.299 --> 00:01:52.519
然后定义另外一个数组呢

00:01:52.519 --> 00:01:54.420
我们再把这个另外一个

00:01:54.420 --> 00:01:57.079
就是我们去循环这个数组也好

00:01:57.079 --> 00:01:58.379
直接去拷贝也好

00:01:58.379 --> 00:01:59.879
我们就写循环吧

00:01:59.879 --> 00:02:03.519
for let's i 复制成0

00:02:03.519 --> 00:02:04.759
i 小于

00:02:04.759 --> 00:02:07.199
数组的长度

00:02:07.199 --> 00:02:09.000
i 加价

00:02:09.000 --> 00:02:11.340
然后这个时候我们把

00:02:11.340 --> 00:02:13.159
这个数的元素

00:02:13.159 --> 00:02:14.259
我们直接去

00:02:14.259 --> 00:02:15.419
应该是i

00:02:15.419 --> 00:02:18.979
直接去复制到这个数组2里面

00:02:18.979 --> 00:02:20.659
然后去再去做

00:02:20.659 --> 00:02:21.759
其他的一些操作

00:02:21.759 --> 00:02:22.399
对吧

00:02:22.399 --> 00:02:23.319
所以这个时候大家看一下

00:02:23.319 --> 00:02:25.539
我们当输入一个数组的时候

00:02:25.539 --> 00:02:27.799
这个数组的这个长度

00:02:27.799 --> 00:02:29.379
就影响了空间

00:02:29.379 --> 00:02:30.019
为什么呢

00:02:30.019 --> 00:02:31.479
因为我们定义了另外一个数组

00:02:31.479 --> 00:02:32.399
这个数组呢

00:02:32.399 --> 00:02:34.739
它是拷贝了这个数组的一个东西

00:02:34.739 --> 00:02:36.299
比如说不一定拷贝啊

00:02:36.299 --> 00:02:38.139
比如说这个数组每个都加10

00:02:38.139 --> 00:02:40.239
然后复制给这个第二个数组

00:02:40.239 --> 00:02:41.479
总之这个是有用的

00:02:41.479 --> 00:02:42.019
对吧

00:02:42.019 --> 00:02:43.620
这个后面程序我们就不在写了

00:02:43.620 --> 00:02:45.120
然后我们表示的意思就是说

00:02:45.120 --> 00:02:47.560
我们在执行这个函数的时候呢

00:02:47.560 --> 00:02:49.739
我们传入的这个数据的数据量

00:02:49.740 --> 00:02:52.060
它的长度和我们占用的空间

00:02:52.060 --> 00:02:53.520
是有关系的

00:02:53.520 --> 00:02:54.740
比如说这个长度是多少

00:02:54.740 --> 00:02:55.860
我们需要占用多少空间

00:02:55.860 --> 00:02:56.879
这种空间复杂度

00:02:56.879 --> 00:02:58.379
是ON的一个例子

00:02:58.379 --> 00:02:59.480
这个很常见

00:02:59.480 --> 00:03:01.480
有时候比如说我们处理一个数组啊

00:03:01.480 --> 00:03:02.879
我们先定一个空数组

00:03:02.879 --> 00:03:04.040
然后处理完之后呢

00:03:04.040 --> 00:03:05.560
再把这个空数组返回

00:03:05.560 --> 00:03:06.920
这个很常见对吧

00:03:06.920 --> 00:03:08.580
这样的话就是ON的一个空间复杂度

00:03:08.580 --> 00:03:10.080
这是比较常见的

00:03:10.080 --> 00:03:10.879
演示完之后呢

00:03:10.879 --> 00:03:11.760
我们再给我说一下

00:03:11.760 --> 00:03:14.879
程序员是必须掌握算法复杂度的

00:03:14.879 --> 00:03:16.479
不管是前端还是后端

00:03:16.479 --> 00:03:18.840
因为这个算法的这个面试题啊

00:03:18.840 --> 00:03:21.379
一开始在后端和扣端的这个面试里面

00:03:21.379 --> 00:03:22.079
是经常考的

00:03:22.079 --> 00:03:23.299
因为他们呢

00:03:23.299 --> 00:03:24.819
就是对这个算法要求比较高一些

00:03:24.819 --> 00:03:26.539
然后前端最近几年

00:03:26.539 --> 00:03:27.780
这个中心越来越多

00:03:27.780 --> 00:03:28.759
然后做的越来越广

00:03:28.759 --> 00:03:30.639
然后算法才慢慢开始考的

00:03:30.639 --> 00:03:31.719
所以说现在看来

00:03:31.719 --> 00:03:33.479
所有的程序员都必须掌握算法复杂度

00:03:33.479 --> 00:03:36.060
如果是说你没有复杂度的概念

00:03:36.060 --> 00:03:37.180
或者说敏感度

00:03:37.180 --> 00:03:37.939
这个词很重要

00:03:37.939 --> 00:03:39.219
叫敏感度

00:03:39.219 --> 00:03:40.519
就你看到一个算法之后

00:03:40.519 --> 00:03:41.439
你要下意识的觉得

00:03:41.439 --> 00:03:43.120
这个算法的复杂度行不行

00:03:43.120 --> 00:03:44.980
你要有这么一个下意识的感觉

00:03:44.980 --> 00:03:45.980
条件反射

00:03:45.980 --> 00:03:47.740
然后如果你没有这个的话呢

00:03:47.740 --> 00:03:49.080
写程序是非常危险的

00:03:49.080 --> 00:03:50.580
你很有可能写出什么呢

00:03:50.580 --> 00:03:52.599
写出一些功能上看似可以

00:03:52.599 --> 00:03:53.719
但是已运行

00:03:53.719 --> 00:03:54.939
或者说数据量一大

00:03:54.939 --> 00:03:56.099
就崩溃的一个效果

00:03:56.099 --> 00:03:57.860
大家去看看之前那个图

00:03:57.860 --> 00:03:58.520
例如

00:03:58.520 --> 00:03:59.640
就是刚才说的

00:03:59.640 --> 00:04:00.540
功能测试没有问题

00:04:00.540 --> 00:04:01.280
但是呢

00:04:01.280 --> 00:04:02.420
数据量一大就崩溃了

00:04:02.420 --> 00:04:03.840
尤其对于前端呢

00:04:03.840 --> 00:04:05.819
我们是重时间

00:04:05.819 --> 00:04:06.719
轻空间

00:04:06.719 --> 00:04:08.360
所以特别是时间复杂度

00:04:08.360 --> 00:04:09.560
我们一定要注意

00:04:09.560 --> 00:04:10.700
空间复杂度呢

00:04:10.700 --> 00:04:11.620
一般情况下

00:04:11.620 --> 00:04:12.659
不会有什么大的问题

00:04:12.659 --> 00:04:13.620
因为你不可能

00:04:13.620 --> 00:04:14.579
占用太多的空间

00:04:14.579 --> 00:04:15.759
而且前端的空间呢

00:04:15.759 --> 00:04:16.939
也是比较充裕的

00:04:16.939 --> 00:04:17.420
空间复杂度

00:04:17.420 --> 00:04:18.579
一般是对于什么呢

00:04:18.579 --> 00:04:19.839
那些做后端

00:04:19.839 --> 00:04:21.060
做嵌溃式开发的

00:04:21.060 --> 00:04:22.899
因为他们的这个小型机

00:04:22.899 --> 00:04:23.920
或者小型的内存呢

00:04:23.920 --> 00:04:24.379
比较小

00:04:24.379 --> 00:04:25.740
所以说他们要节省的用

00:04:25.740 --> 00:04:26.939
但是对于前端来说

00:04:26.939 --> 00:04:28.000
这个问题不大

00:04:28.000 --> 00:04:29.379
但是我们的时间复杂度

00:04:29.379 --> 00:04:30.500
是很虚的

00:04:30.500 --> 00:04:31.980
因为我们经常做什么

00:04:31.980 --> 00:04:32.500
性能优化

00:04:32.500 --> 00:04:32.920
性能优化

00:04:32.920 --> 00:04:33.360
性能优化

00:04:33.360 --> 00:04:34.360
要压缩时间

00:04:34.360 --> 00:04:36.399
所以说这个时间是很重要的

00:04:36.399 --> 00:04:37.720
我们再看这个图啊

00:04:37.720 --> 00:04:38.139
比如说

00:04:38.139 --> 00:04:39.560
你如果写了一个算法

00:04:39.560 --> 00:04:40.720
它的时间复杂度

00:04:40.720 --> 00:04:42.100
到了这个n的平方

00:04:42.100 --> 00:04:43.280
这个算法

00:04:43.280 --> 00:04:44.379
基本上不可用的

00:04:44.379 --> 00:04:45.060
我们就从这个图中

00:04:45.060 --> 00:04:45.639
就可以看出来

00:04:45.639 --> 00:04:46.780
输入的量

00:04:46.780 --> 00:04:47.980
一旦增大

00:04:47.980 --> 00:04:48.920
你这个算法的量

00:04:48.920 --> 00:04:49.839
会飙升

00:04:49.839 --> 00:04:51.000
一直到上天

00:04:51.000 --> 00:04:52.060
我们刚才说过

00:04:52.060 --> 00:04:53.600
如果输入量是1万的话

00:04:53.600 --> 00:04:54.519
你的计算量

00:04:54.519 --> 00:04:55.379
就会到一个亿

00:04:55.379 --> 00:04:57.480
这是一个非常恐怖的一个概念

00:04:57.480 --> 00:04:57.879
所以说

00:04:57.879 --> 00:04:59.699
我们最好是能把自己的

00:04:59.699 --> 00:05:00.600
算法的时间复杂度

00:05:00.600 --> 00:05:01.620
控制到什么呢

00:05:01.620 --> 00:05:02.240
控制到这个

00:05:02.240 --> 00:05:03.220
on这个级别

00:05:03.220 --> 00:05:04.399
当然有少一部分

00:05:04.399 --> 00:05:06.040
会到这个n乘以logn

00:05:06.040 --> 00:05:06.939
但是大部分

00:05:06.939 --> 00:05:07.560
我们要控制到

00:05:07.560 --> 00:05:08.300
on这个级别

00:05:08.300 --> 00:05:09.759
最好是能控制到这个

00:05:09.759 --> 00:05:11.020
logn这个级别

00:05:11.020 --> 00:05:12.420
如果能到logn级别

00:05:12.420 --> 00:05:13.360
那就非常非常好了

00:05:13.360 --> 00:05:14.819
我们在本章里面

00:05:14.819 --> 00:05:15.939
会专门讲一节

00:05:15.939 --> 00:05:17.300
讲这个二大数

00:05:17.300 --> 00:05:18.100
二大数

00:05:18.100 --> 00:05:19.340
它这个存在的一个根本

00:05:19.340 --> 00:05:20.240
就是因为

00:05:20.240 --> 00:05:22.020
我们想把所有的操作

00:05:22.020 --> 00:05:23.819
都控制到这个logn这个级别

00:05:23.819 --> 00:05:24.360
当然

00:05:24.360 --> 00:05:26.580
你要想到这个o1级别

00:05:26.580 --> 00:05:27.699
那就有点吃心忘想了

00:05:27.699 --> 00:05:27.879
对吧

00:05:27.879 --> 00:05:28.620
我们不可能

00:05:28.620 --> 00:05:29.800
所有的算法都到o1级别

00:05:29.800 --> 00:05:30.939
这个是非常少的

00:05:30.939 --> 00:05:32.620
但是能到logn级别

00:05:32.620 --> 00:05:33.939
就是已经非常好了

00:05:33.939 --> 00:05:34.879
但是有些呢

00:05:34.879 --> 00:05:36.379
到n级别也是可以的

00:05:36.379 --> 00:05:38.120
但千万不要到这个n的平方

00:05:38.120 --> 00:05:39.500
甚至n的三次方

00:05:39.500 --> 00:05:40.959
甚至2的n次方

00:05:40.959 --> 00:05:41.920
这就太恐怖了

00:05:41.920 --> 00:05:43.579
因为我们后面会讲一个叫

00:05:43.579 --> 00:05:45.240
非本大器数列的一个算法

00:05:45.240 --> 00:05:46.899
如果我们默认情况下做的话

00:05:46.899 --> 00:05:48.259
它就到了2的n次方

00:05:48.259 --> 00:05:49.079
大家注意啊

00:05:49.079 --> 00:05:50.060
是2的n次方

00:05:50.060 --> 00:05:51.120
不是n的2次方

00:05:51.120 --> 00:05:52.699
2的n次方更加恐怖啊

00:05:52.699 --> 00:05:55.079
所以那个算法是完全不可用的

00:05:55.079 --> 00:05:56.360
一到了数量级以上

00:05:56.360 --> 00:05:57.300
它就程序就崩溃

00:05:57.300 --> 00:05:59.300
我们可以回顾一个

00:05:59.300 --> 00:06:02.680
就是我们家里要讲的一个事情啊

00:06:02.680 --> 00:06:03.659
当然有些同学可能知道

00:06:03.659 --> 00:06:05.819
就是我们这个vdom

00:06:05.819 --> 00:06:08.539
就是react或view里面的这个vdom啊

00:06:08.539 --> 00:06:11.360
vdom这个数的一个dev算法

00:06:11.360 --> 00:06:13.379
我们之前其实在其他课程

00:06:13.379 --> 00:06:14.139
我们也讲过这个问题

00:06:14.139 --> 00:06:17.319
就是普通的这个数的dev算法呢

00:06:17.319 --> 00:06:18.159
它的时间复杂度呢

00:06:18.160 --> 00:06:20.360
应该是on的三次方

00:06:20.360 --> 00:06:21.360
这个为什么呢

00:06:21.360 --> 00:06:22.300
我们后面会说

00:06:22.300 --> 00:06:23.660
我们这儿先不做考究

00:06:23.660 --> 00:06:25.060
只是这么说啊

00:06:25.060 --> 00:06:26.080
这个on的三次方

00:06:26.080 --> 00:06:27.000
这个时间法度

00:06:27.000 --> 00:06:27.800
大家觉得可用吗

00:06:27.800 --> 00:06:29.439
完全完全不可用

00:06:29.439 --> 00:06:31.340
这个是很容易崩溃的一个事情

00:06:31.340 --> 00:06:32.220
大家想一下

00:06:32.220 --> 00:06:33.240
我的算法

00:06:33.240 --> 00:06:34.300
n的三次方

00:06:34.300 --> 00:06:35.379
这个就不得了

00:06:35.379 --> 00:06:36.060
对吧

00:06:36.060 --> 00:06:37.400
这个输入量稍微大一点

00:06:37.400 --> 00:06:38.220
这个程序就崩溃

00:06:38.220 --> 00:06:39.260
那所以怎么办

00:06:39.260 --> 00:06:41.420
所以react最先提出

00:06:41.420 --> 00:06:45.280
要去优化vdom的一个treative算法

00:06:45.280 --> 00:06:46.480
它优化完之后呢

00:06:46.480 --> 00:06:48.060
是on

00:06:48.060 --> 00:06:50.120
大家看一下

00:06:50.120 --> 00:06:51.280
从n的三次方

00:06:51.280 --> 00:06:51.920
到了n

00:06:51.920 --> 00:06:53.000
到这个级别

00:06:53.000 --> 00:06:54.620
那我们的代码就可以了

00:06:54.620 --> 00:06:56.160
所以这个例子

00:06:56.160 --> 00:06:57.939
当然为什么大家先不用管它

00:06:57.939 --> 00:07:00.460
你看这两个关键词就可以了

00:07:00.460 --> 00:07:00.980
这个例子

00:07:00.980 --> 00:07:02.740
就非常能结合我们这个图

00:07:02.740 --> 00:07:03.700
去说明一个问题

00:07:03.700 --> 00:07:04.520
化重点

00:07:04.520 --> 00:07:05.600
第一个

00:07:05.600 --> 00:07:07.420
算法复杂度是学义算法的基础

00:07:07.420 --> 00:07:07.939
非常重要

00:07:07.939 --> 00:07:09.500
理解不了就背诵

00:07:09.500 --> 00:07:11.379
这两件理解不了就背诵

00:07:11.379 --> 00:07:12.980
然后你要把图画出来

00:07:12.980 --> 00:07:14.240
去背过

00:07:14.240 --> 00:07:15.400
以及它的代码表现

00:07:15.400 --> 00:07:16.379
先去背诵

00:07:16.379 --> 00:07:18.519
当然背诵不是说让你一直背

00:07:18.519 --> 00:07:19.899
背诵完之后呢

00:07:19.899 --> 00:07:20.779
你这一章看完之后

00:07:20.779 --> 00:07:21.579
你就可以去理解

00:07:21.579 --> 00:07:24.219
然后复杂度是数量级

00:07:24.219 --> 00:07:26.139
要用on来表示

00:07:26.139 --> 00:07:28.259
内部是一个函数比达式

00:07:28.259 --> 00:07:29.639
函数比达式是什么意思呢

00:07:29.639 --> 00:07:31.839
就是像这个1是不是一个函数

00:07:31.839 --> 00:07:33.100
logn是不是函数

00:07:33.100 --> 00:07:34.219
n也是函数

00:07:34.219 --> 00:07:35.800
然后n乘logn

00:07:35.800 --> 00:07:37.079
以及n的平方都是一个函数

00:07:37.079 --> 00:07:37.519
对不对

00:07:37.519 --> 00:07:38.540
我们上学的时候

00:07:38.540 --> 00:07:39.339
我们经常学嘛

00:07:39.339 --> 00:07:40.800
比如说一个函数

00:07:40.800 --> 00:07:41.719
这个函数呢

00:07:41.720 --> 00:07:43.740
就是这样的

00:07:43.740 --> 00:07:45.500
这样的函数的曲线是什么样的

00:07:45.500 --> 00:07:47.340
这个曲线就是这样的一个曲线

00:07:47.340 --> 00:07:48.940
如果一个函数

00:07:48.940 --> 00:07:51.180
它是这样的

00:07:51.180 --> 00:07:52.900
n的平方

00:07:52.900 --> 00:07:53.920
那它的曲线呢

00:07:53.920 --> 00:07:55.160
就这么一个曲线

00:07:55.160 --> 00:07:55.740
对吧

00:07:55.740 --> 00:07:56.560
这是我们上学的数

00:07:56.560 --> 00:07:57.900
学的数学的一个初中生

00:07:57.900 --> 00:07:59.120
就可以学的一个函数

00:07:59.120 --> 00:08:00.060
这个很好理解

00:08:00.060 --> 00:08:01.720
继续

00:08:01.720 --> 00:08:03.079
数量级这个词很重要

00:08:03.079 --> 00:08:03.579
继续

00:08:03.579 --> 00:08:04.339
学生开发

00:08:04.339 --> 00:08:05.399
重时间

00:08:05.399 --> 00:08:06.459
轻空间

00:08:06.459 --> 00:08:07.199
大家注意

00:08:07.199 --> 00:08:07.959
重时间

00:08:07.959 --> 00:08:08.480
轻空间

00:08:08.480 --> 00:08:08.980
时间复杂度

00:08:08.980 --> 00:08:09.540
尤其重要

00:08:09.540 --> 00:08:10.759
所以我们在面试的时候

00:08:10.759 --> 00:08:12.720
有可能根本就不考你空间复杂度

00:08:12.720 --> 00:08:14.420
然后上来就抓你时间复杂度

00:08:14.420 --> 00:08:14.939
时间复杂度

00:08:14.939 --> 00:08:15.500
时间复杂度

00:08:15.500 --> 00:08:16.779
你如果是搞不定

00:08:16.779 --> 00:08:17.759
那sorry

00:08:17.759 --> 00:08:18.379
抱歉

00:08:18.379 --> 00:08:18.800
不要你

00:08:18.800 --> 00:08:19.379
OK

00:08:19.379 --> 00:08:21.300
我们花了大概20分钟的时间

00:08:21.300 --> 00:08:23.560
我们讲了讲这个时间复杂度

00:08:23.560 --> 00:08:24.240
和空间复杂度

00:08:24.240 --> 00:08:26.060
这是我们这张的一个基础

00:08:26.060 --> 00:08:27.019
我们不讲不行

00:08:27.019 --> 00:08:27.879
所以说

00:08:27.879 --> 00:08:28.779
还是那句话

00:08:28.780 --> 00:08:30.680
必须要去先掌握这个

00:08:30.680 --> 00:08:31.360
再学习本章

00:08:31.360 --> 00:08:32.399
如果理解不了

00:08:32.399 --> 00:08:33.200
就先背诵

00:08:33.200 --> 00:08:34.519
一定要知道这个图

00:08:34.519 --> 00:08:35.660
一定要把那个图画出来

00:08:35.660 --> 00:08:36.620
然后一定要知道

00:08:36.620 --> 00:08:37.700
每个时间复杂度

00:08:37.700 --> 00:08:39.340
和它的代码之间的一个关系

00:08:39.340 --> 00:08:40.700
比如说一次循环

00:08:40.700 --> 00:08:41.379
没有循环

00:08:41.379 --> 00:08:42.139
还是千套循环

00:08:42.139 --> 00:08:42.720
还是二分

00:08:42.720 --> 00:08:44.860
这个一定要搞清楚才行

00:08:44.860 --> 00:08:46.259
然后我们学习本章

00:08:46.259 --> 00:08:47.160
就没有什么压力

