WEBVTT

00:00:00.000 --> 00:00:00.680
见证函数

00:00:00.680 --> 00:00:03.660
这个是跟我们日常工作密切相关的东西

00:00:03.660 --> 00:00:05.719
所以这个必须要有个面试题

00:00:05.719 --> 00:00:07.080
见证函数有什么缺点

00:00:07.080 --> 00:00:08.279
主要是第二个

00:00:08.279 --> 00:00:10.220
什么时候不能使用见证函数

00:00:10.220 --> 00:00:11.580
缺点不缺点

00:00:11.580 --> 00:00:12.759
你知道也行不知道也行

00:00:12.759 --> 00:00:15.160
但什么时候你不能使用

00:00:15.160 --> 00:00:15.620
你得知道

00:00:15.620 --> 00:00:17.379
而且要知道为什么不能使用

00:00:17.379 --> 00:00:19.460
如果说你觉得见证函数很高级

00:00:19.460 --> 00:00:21.320
然后它可以规避类似的问题

00:00:21.320 --> 00:00:23.320
所有的场景下都是有见证函数

00:00:23.320 --> 00:00:25.760
那万一有时候你不能用

00:00:25.760 --> 00:00:26.359
你用了

00:00:26.359 --> 00:00:28.440
而且你还不知道为什么不能用

00:00:28.440 --> 00:00:29.420
你还找不出问题来

00:00:29.420 --> 00:00:31.040
这不是添乱吗

00:00:31.040 --> 00:00:33.900
所以说这个面试题是非常非常有别的

00:00:33.900 --> 00:00:36.280
而且我们之前老说工作是工作

00:00:36.280 --> 00:00:36.960
面试是面试

00:00:36.960 --> 00:00:38.400
两者结合不起来

00:00:38.400 --> 00:00:39.820
但是在这个题目上

00:00:39.820 --> 00:00:41.380
它是能完全结合起来的

00:00:41.380 --> 00:00:42.540
我们先说缺点

00:00:42.540 --> 00:00:44.780
第一个没有arguments

00:00:44.780 --> 00:00:45.760
什么意思

00:00:45.760 --> 00:00:47.880
我新建一个文件叫

00:00:47.880 --> 00:00:50.180
arrow-find.entrml

00:00:50.180 --> 00:00:52.480
我们可以定一个见证函数

00:00:52.480 --> 00:00:54.260
一个很普通的函数

00:00:54.260 --> 00:00:58.100
然后console.logarguments

00:00:58.100 --> 00:01:01.160
arguments这个东西呢

00:01:01.160 --> 00:01:03.579
其实在我们普通的函数里面是有的

00:01:03.579 --> 00:01:05.540
就是我们在教用的时候是有的

00:01:05.540 --> 00:01:07.780
比如说我们fn100 200

00:01:07.780 --> 00:01:09.640
普通函数这个arguments是有的

00:01:09.640 --> 00:01:10.420
就是这两个参数

00:01:10.420 --> 00:01:12.079
但是这个函数不行

00:01:12.079 --> 00:01:12.980
我们刷新一下

00:01:12.980 --> 00:01:15.000
arguments is not defined

00:01:15.000 --> 00:01:16.620
它没有不被定义

00:01:16.620 --> 00:01:17.680
就说明是错误的

00:01:17.680 --> 00:01:20.439
但是我们可以用普通的函数试一下

00:01:20.439 --> 00:01:22.299
直接copy过来

00:01:22.299 --> 00:01:25.359
然后把这个给它注册掉

00:01:25.359 --> 00:01:26.439
大家看一下

00:01:26.439 --> 00:01:27.560
能打印对吧

00:01:27.560 --> 00:01:28.739
arguments 100 200

00:01:28.739 --> 00:01:29.840
这两个参数没问题

00:01:29.840 --> 00:01:31.719
但是见证函数就不行

00:01:31.719 --> 00:01:33.240
这是第一个缺点

00:01:33.240 --> 00:01:34.519
第二个缺点

00:01:34.519 --> 00:01:37.519
无法通过apply call bind来改变this

00:01:37.519 --> 00:01:40.000
间断函数的this就是固定的

00:01:40.000 --> 00:01:42.199
它就是使用的是负界点的this

00:01:42.199 --> 00:01:43.719
我们再来一个

00:01:43.719 --> 00:01:45.039
把这个注视角

00:01:45.039 --> 00:01:48.579
console.fn2

00:01:48.579 --> 00:01:49.979
分成一个间断函数

00:01:49.979 --> 00:01:52.459
然后console.log

00:01:52.459 --> 00:01:52.920
this

00:01:52.920 --> 00:01:56.299
这个时候我们去执行这个fn2的时候

00:01:56.299 --> 00:01:57.959
它打印的this是什么呢

00:01:57.959 --> 00:01:59.340
打印的this是window

00:01:59.340 --> 00:02:01.739
因为间断函数的this全部都是

00:02:01.740 --> 00:02:05.020
比如说它的负责用域里面的this

00:02:05.020 --> 00:02:06.940
这个时候你在这个地方

00:02:06.940 --> 00:02:08.200
打印一个this它是什么

00:02:08.200 --> 00:02:09.800
那这个地方就是什么

00:02:09.800 --> 00:02:11.879
它不是在执行的时候确定的

00:02:11.879 --> 00:02:13.080
这个和普通函数也不一样

00:02:13.080 --> 00:02:16.260
比如说我们想要在这里面去修改

00:02:16.260 --> 00:02:17.659
它的this的值

00:02:17.659 --> 00:02:19.640
比如说我们随便改一个对象

00:02:19.640 --> 00:02:20.620
能不能改

00:02:20.620 --> 00:02:21.320
不能改

00:02:21.320 --> 00:02:23.900
不能通过call apply和band去修改this

00:02:23.900 --> 00:02:25.240
但是普通函数就可以

00:02:25.240 --> 00:02:26.439
我们可以试一下

00:02:26.439 --> 00:02:28.500
普通函数就是解开

00:02:28.500 --> 00:02:30.120
然后fn1

00:02:30.120 --> 00:02:31.879
我们不用这个了

00:02:31.879 --> 00:02:32.879
越写越乱

00:02:32.879 --> 00:02:34.640
我们这直接写一个

00:02:34.640 --> 00:02:36.360
fn2

00:02:36.360 --> 00:02:39.159
然后在这里面去打印出这个this

00:02:39.159 --> 00:02:40.800
然后把这个注释掉

00:02:40.800 --> 00:02:41.879
在这里面

00:02:41.879 --> 00:02:43.340
这个普通函数就是可以的

00:02:43.340 --> 00:02:45.560
this是一个对象

00:02:45.560 --> 00:02:48.659
所以说它是没法去修改this的

00:02:48.659 --> 00:02:49.460
这段函数的this

00:02:49.460 --> 00:02:50.980
永远是指向自己的负责用域

00:02:50.980 --> 00:02:52.540
定义的时候的负责用域

00:02:52.540 --> 00:02:54.500
它是没有办法被修改的

00:02:54.500 --> 00:02:56.900
然后这个也不算是缺点了

00:02:56.900 --> 00:02:59.080
反正是也算是个缺点吧

00:02:59.080 --> 00:03:00.920
在答案里面有也行没有也行

00:03:00.920 --> 00:03:02.420
主要是给大家提醒一下

00:03:02.420 --> 00:03:02.940
这个事情

00:03:02.940 --> 00:03:05.160
就是某些减数函数的代码

00:03:05.160 --> 00:03:06.080
是难以阅读的

00:03:06.080 --> 00:03:07.480
我在网上抄了一个

00:03:07.480 --> 00:03:08.880
我不是我写的

00:03:08.880 --> 00:03:09.520
我也写不出来

00:03:09.520 --> 00:03:11.620
就是一个函数

00:03:11.620 --> 00:03:13.340
它怎么写呢

00:03:13.340 --> 00:03:15.140
先是ab两个参数

00:03:15.140 --> 00:03:17.400
然后一个箭头返回

00:03:17.400 --> 00:03:20.120
如果b等于undefined

00:03:20.120 --> 00:03:22.260
然后问号b

00:03:22.260 --> 00:03:23.880
然后再来一个函数

00:03:23.879 --> 00:03:25.240
a乘以b

00:03:25.240 --> 00:03:27.299
然后再一个冒号

00:03:27.299 --> 00:03:28.620
a乘以b

00:03:28.620 --> 00:03:29.620
你看一下

00:03:29.620 --> 00:03:30.340
这是什么东西

00:03:30.340 --> 00:03:30.659
对吧

00:03:30.659 --> 00:03:31.960
反正我是没看懂

00:03:31.960 --> 00:03:33.180
当然我没看懂

00:03:33.180 --> 00:03:35.060
不是说我真的看不懂

00:03:35.060 --> 00:03:36.479
那个深入的去batch

00:03:36.479 --> 00:03:37.599
去调试一下

00:03:37.599 --> 00:03:38.759
懂是没有问题的

00:03:38.759 --> 00:03:39.560
谁都可以看懂

00:03:39.560 --> 00:03:41.079
我为什么要看懂它呢

00:03:41.079 --> 00:03:41.319
对吧

00:03:41.319 --> 00:03:42.300
这个东西

00:03:42.300 --> 00:03:43.159
你说它高级

00:03:43.159 --> 00:03:43.939
它一点都不高级

00:03:43.939 --> 00:03:45.240
它很低级

00:03:45.240 --> 00:03:47.460
而且就是写着代码的人

00:03:47.460 --> 00:03:48.819
也不知道他怎么想的

00:03:48.819 --> 00:03:49.840
就这种东西

00:03:49.840 --> 00:03:50.840
难以阅读的东西

00:03:50.840 --> 00:03:51.919
就不要给大家写出来

00:03:51.920 --> 00:03:53.320
这工作中写这种东西

00:03:53.320 --> 00:03:54.300
是很容易被喷的

00:03:54.300 --> 00:03:55.640
这是这个

00:03:55.640 --> 00:03:56.160
你的领导

00:03:56.160 --> 00:03:56.600
你的架务师

00:03:56.600 --> 00:03:57.500
都不喜欢这种东西

00:03:57.500 --> 00:03:59.080
这种函数少写

00:03:59.080 --> 00:04:00.820
如果说我没普通函数

00:04:00.820 --> 00:04:01.640
写不出这种东西

00:04:01.640 --> 00:04:02.880
但箭头函数一写

00:04:02.880 --> 00:04:03.720
你看这个箭头

00:04:03.720 --> 00:04:05.240
这其实是两个函数

00:04:05.240 --> 00:04:06.140
签套起来的

00:04:06.140 --> 00:04:07.040
但是它又能写出

00:04:07.040 --> 00:04:07.600
这种东西来

00:04:07.600 --> 00:04:09.260
没有中间的结构

00:04:09.260 --> 00:04:10.880
和那个层级的包裹

00:04:10.880 --> 00:04:12.640
所以大家不要这样写

00:04:12.640 --> 00:04:13.680
不要觉得

00:04:13.680 --> 00:04:14.880
这个东西是高级的

00:04:14.880 --> 00:04:16.139
不要觉得别人看不懂

00:04:16.139 --> 00:04:16.680
就是高级的

00:04:16.680 --> 00:04:17.200
你错了

00:04:17.200 --> 00:04:18.700
你能写出来

00:04:18.700 --> 00:04:20.080
所有人都能看懂的代码

00:04:20.079 --> 00:04:21.459
这才是高级的

00:04:21.459 --> 00:04:22.979
不管是他是老谋深算的

00:04:22.979 --> 00:04:23.779
老工程师

00:04:23.779 --> 00:04:25.219
还是说他是一个

00:04:25.219 --> 00:04:26.019
刚毕业的实义生

00:04:26.019 --> 00:04:27.419
他都能看懂你的代码

00:04:27.419 --> 00:04:28.459
这才是高级的

00:04:28.459 --> 00:04:29.459
我们再说这个

00:04:29.459 --> 00:04:30.240
不适应的情况

00:04:30.240 --> 00:04:31.839
我们先说明完之后

00:04:31.839 --> 00:04:32.560
我们再去总结

00:04:32.560 --> 00:04:33.979
第一种情况

00:04:33.979 --> 00:04:34.620
大家注意听

00:04:34.620 --> 00:04:35.919
这是答案

00:04:35.919 --> 00:04:37.180
第一种情况

00:04:37.180 --> 00:04:38.079
对象方法

00:04:38.079 --> 00:04:40.419
就是一个对象里面

00:04:40.419 --> 00:04:41.519
我们的方法

00:04:41.519 --> 00:04:42.219
用间的函数

00:04:42.219 --> 00:04:44.039
然后用zs去获取

00:04:44.039 --> 00:04:44.620
是不行的

00:04:44.620 --> 00:04:46.599
我们可以去试一下

00:04:46.599 --> 00:04:48.319
一个对象

00:04:48.319 --> 00:04:49.980
然后name等于

00:04:49.980 --> 00:04:50.680
随便写一个

00:04:50.680 --> 00:04:52.779
然后get name

00:04:52.779 --> 00:04:53.879
get name

00:04:53.879 --> 00:04:55.019
如果用普通函数的话

00:04:55.019 --> 00:04:56.620
其实获取这个list name

00:04:56.620 --> 00:04:57.839
是没有问题的

00:04:57.839 --> 00:04:58.579
用普通函数

00:04:58.579 --> 00:04:59.819
return list name

00:04:59.819 --> 00:05:00.620
这是没有问题的

00:05:00.620 --> 00:05:02.800
但是你如果用箭头函数

00:05:02.800 --> 00:05:03.920
那抱歉

00:05:03.920 --> 00:05:04.939
这个是不行的

00:05:04.939 --> 00:05:06.180
比如说

00:05:06.180 --> 00:05:07.120
我们就执行一下

00:05:07.120 --> 00:05:08.680
这个object.get name

00:05:08.680 --> 00:05:10.240
保存

00:05:10.240 --> 00:05:11.379
刷新

00:05:11.379 --> 00:05:12.480
没有对吧

00:05:12.480 --> 00:05:12.980
什么都没有

00:05:12.980 --> 00:05:13.899
空的

00:05:13.899 --> 00:05:14.639
获取不出来

00:05:14.639 --> 00:05:15.100
知道吧

00:05:15.100 --> 00:05:16.519
这是第一种情况

00:05:16.519 --> 00:05:17.699
是对象的方法

00:05:17.699 --> 00:05:18.439
不能用箭头函数

00:05:18.439 --> 00:05:20.539
因为它这个zs的值

00:05:20.539 --> 00:05:21.620
它这个zs指向的

00:05:21.620 --> 00:05:22.519
并不是这个object

00:05:22.519 --> 00:05:23.979
我们之前说过

00:05:23.979 --> 00:05:25.859
然后原型方法也是

00:05:25.859 --> 00:05:26.740
跟这个是一样的

00:05:26.740 --> 00:05:28.439
比如说有一个对象

00:05:28.439 --> 00:05:29.399
然后你在原型上

00:05:29.399 --> 00:05:29.879
进行扩展

00:05:29.879 --> 00:05:30.939
这个时候

00:05:30.939 --> 00:05:31.500
你用箭头函数

00:05:31.500 --> 00:05:32.680
这个zs也不会指向

00:05:32.680 --> 00:05:33.479
这个当前对象

00:05:33.479 --> 00:05:35.079
这个也是不对的

00:05:35.079 --> 00:05:36.039
它也不会指向

00:05:36.039 --> 00:05:36.779
这个对象的原型

00:05:36.779 --> 00:05:37.959
它指向的就是

00:05:37.959 --> 00:05:38.699
它这个函数

00:05:38.699 --> 00:05:39.419
负作用于的

00:05:39.419 --> 00:05:40.719
比如说是window

00:05:40.719 --> 00:05:42.519
所以这个是不对的

00:05:42.519 --> 00:05:42.979
再说一句

00:05:42.979 --> 00:05:44.459
这个原型和原型链

00:05:44.459 --> 00:05:46.839
如果说你之前不了解的话

00:05:46.839 --> 00:05:48.379
一定要向我提问

00:05:48.379 --> 00:05:50.120
我告诉你怎么去学习

00:05:50.120 --> 00:05:51.120
因为我们这儿

00:05:51.120 --> 00:05:51.799
不会讲那个

00:05:51.799 --> 00:05:52.699
zs的基础知识

00:05:52.699 --> 00:05:53.639
就是默认理会了

00:05:53.639 --> 00:05:54.639
第二种情况

00:05:54.639 --> 00:05:55.319
对吧

00:05:55.319 --> 00:05:55.819
第三种情况

00:05:55.819 --> 00:05:56.680
构造函数也不行

00:05:56.680 --> 00:05:58.799
这个比如说有一个函数

00:05:58.799 --> 00:06:00.120
然后你像new的函数

00:06:00.120 --> 00:06:01.120
这个也是不行

00:06:01.120 --> 00:06:02.979
这个需要给大家演示一下

00:06:02.979 --> 00:06:04.939
我们订阅一个

00:06:04.939 --> 00:06:07.139
constfn4

00:06:07.139 --> 00:06:08.620
它复制成构造函数

00:06:08.620 --> 00:06:10.639
比如说name city

00:06:10.639 --> 00:06:11.939
listrname

00:06:11.939 --> 00:06:13.099
复制成name

00:06:13.099 --> 00:06:14.560
listrcity

00:06:14.560 --> 00:06:15.399
复制成city

00:06:15.399 --> 00:06:17.300
然后constf

00:06:17.300 --> 00:06:18.079
复制成new

00:06:18.079 --> 00:06:20.019
这个大写吧

00:06:20.019 --> 00:06:22.060
一般购作函数是大写

00:06:22.060 --> 00:06:26.019
把这个参数传进去

00:06:26.019 --> 00:06:27.819
这样的话

00:06:27.819 --> 00:06:28.560
如果是普通函数

00:06:28.560 --> 00:06:30.099
是能创建一个对象的

00:06:30.099 --> 00:06:31.620
但是这个地方不行

00:06:31.620 --> 00:06:33.319
我们刷新一下

00:06:33.319 --> 00:06:34.180
大家看

00:06:34.180 --> 00:06:35.759
这个is not a constructor

00:06:35.759 --> 00:06:37.199
就是这个函数

00:06:37.199 --> 00:06:38.379
它不是一个constructor

00:06:38.379 --> 00:06:39.099
不是购作函数

00:06:39.100 --> 00:06:41.160
建筒函数没法当固定函数

00:06:41.160 --> 00:06:42.379
所以说这个地方

00:06:42.379 --> 00:06:43.360
也不能使用

00:06:43.360 --> 00:06:45.060
我们这直接注释一下

00:06:45.060 --> 00:06:46.140
写完就注释一下吧

00:06:46.140 --> 00:06:47.100
再往下

00:06:47.100 --> 00:06:48.580
动态上下文中的

00:06:48.580 --> 00:06:48.980
回到函数

00:06:48.980 --> 00:06:50.620
比如说有一个按钮

00:06:50.620 --> 00:06:52.000
然后我们给按钮

00:06:52.000 --> 00:06:52.900
增加click事件

00:06:52.900 --> 00:06:53.980
这个时候

00:06:53.980 --> 00:06:54.700
回到里面

00:06:54.700 --> 00:06:55.860
我们如果就用建筒函数

00:06:55.860 --> 00:06:57.320
你如果是

00:06:57.320 --> 00:06:58.439
这里面没有this

00:06:58.439 --> 00:06:59.460
用建筒函数

00:06:59.460 --> 00:07:00.300
一点问题都没有

00:07:00.300 --> 00:07:02.160
但是你如果在这里面

00:07:02.160 --> 00:07:02.900
需要用到this

00:07:02.900 --> 00:07:04.100
那用建筒函数就不行

00:07:04.100 --> 00:07:05.700
还是之前那个意思

00:07:05.700 --> 00:07:06.960
建筒函数的this

00:07:06.960 --> 00:07:08.180
是指向它的副作用域的

00:07:08.180 --> 00:07:08.860
不是指向这个

00:07:08.860 --> 00:07:09.340
button的

00:07:09.340 --> 00:07:10.680
这个时候就必须用

00:07:10.680 --> 00:07:11.600
普通函数才可以

00:07:11.600 --> 00:07:12.379
要不然的话

00:07:12.379 --> 00:07:12.920
你这个this

00:07:12.920 --> 00:07:13.920
不是指向button

00:07:13.920 --> 00:07:16.120
所以就是动态上下文中的

00:07:16.120 --> 00:07:16.580
回到函数

00:07:16.580 --> 00:07:18.300
就是我们希望

00:07:18.300 --> 00:07:19.259
能通过回到函数中

00:07:19.259 --> 00:07:20.300
通过this

00:07:20.300 --> 00:07:21.160
取到动态上下文

00:07:21.160 --> 00:07:22.139
那个主对象

00:07:22.139 --> 00:07:22.960
但是呢

00:07:22.960 --> 00:07:24.060
建筒函数就不行

00:07:24.060 --> 00:07:24.800
好

00:07:24.800 --> 00:07:25.460
下面这种情况

00:07:25.460 --> 00:07:27.660
view的生命周期和method

00:07:27.660 --> 00:07:28.300
也不行

00:07:28.300 --> 00:07:30.020
这个特别特别需要注意

00:07:30.020 --> 00:07:31.800
因为我们在view里面

00:07:31.800 --> 00:07:33.020
生命周期和method

00:07:33.020 --> 00:07:34.360
这两个是非常非常

00:07:34.360 --> 00:07:34.980
常用的东西

00:07:34.980 --> 00:07:37.020
如果这个你都不知道的话

00:07:37.020 --> 00:07:38.780
那你很容易写出一些

00:07:38.780 --> 00:07:40.320
就是自己看似正确

00:07:40.320 --> 00:07:41.380
但是实际上错误的代码

00:07:41.380 --> 00:07:42.960
比如说这个data里面

00:07:42.960 --> 00:07:43.720
有一个name

00:07:43.720 --> 00:07:45.360
然后这个message里面

00:07:45.360 --> 00:07:46.120
get name

00:07:46.120 --> 00:07:47.200
建筒函数

00:07:47.200 --> 00:07:47.540
反复this

00:07:47.540 --> 00:07:48.540
这是不行的

00:07:48.540 --> 00:07:50.240
这是完全不行的

00:07:50.240 --> 00:07:50.700
怎么都不行

00:07:50.700 --> 00:07:52.120
然后正常态数

00:07:52.120 --> 00:07:52.720
是没有问题的

00:07:52.720 --> 00:07:54.340
包括mounted也是

00:07:54.340 --> 00:07:55.680
这个生命周期也是

00:07:55.680 --> 00:07:56.780
你用建筒函数

00:07:56.780 --> 00:07:57.260
也是不行的

00:07:57.260 --> 00:07:57.680
这个this

00:07:57.680 --> 00:07:58.460
是不会指向

00:07:58.460 --> 00:07:59.820
当前这个view实力的

00:07:59.820 --> 00:08:01.160
必须用普通函数

00:08:01.160 --> 00:08:03.060
为什么这个view的不行呢

00:08:03.060 --> 00:08:04.500
其实本质上

00:08:04.500 --> 00:08:06.200
view它本质上是一个对象

00:08:06.200 --> 00:08:06.640
你看了没

00:08:06.640 --> 00:08:07.400
看这个图上

00:08:07.400 --> 00:08:09.040
它本质上是一个对象

00:08:09.040 --> 00:08:09.860
我们说过

00:08:09.860 --> 00:08:10.660
对象的方法

00:08:10.660 --> 00:08:11.320
不能有建筒函数

00:08:11.320 --> 00:08:11.600
对吧

00:08:11.600 --> 00:08:13.260
一开始就说过了

00:08:13.260 --> 00:08:15.040
所以说这个view的

00:08:15.040 --> 00:08:15.960
这个不适用的问题

00:08:15.960 --> 00:08:17.700
本质上跟第一个问题

00:08:17.700 --> 00:08:19.120
这个对象方法不适用

00:08:19.120 --> 00:08:20.220
是一样的

00:08:20.220 --> 00:08:20.620
只不过呢

00:08:20.620 --> 00:08:21.740
view这个事情太重要了

00:08:21.740 --> 00:08:22.860
所以说我们必须

00:08:22.860 --> 00:08:23.820
单独马出来去说

00:08:23.820 --> 00:08:24.760
它的message

00:08:24.760 --> 00:08:25.480
它的生命周期

00:08:25.480 --> 00:08:26.780
这个必须强调

00:08:26.780 --> 00:08:28.640
但是请你注意一下

00:08:28.640 --> 00:08:30.420
这个view的这个

00:08:30.420 --> 00:08:31.500
生命周期的方法不行

00:08:31.500 --> 00:08:32.899
react行吗

00:08:32.899 --> 00:08:34.080
我还没有说

00:08:34.080 --> 00:08:34.360
对吧

00:08:34.360 --> 00:08:35.680
react行

00:08:35.680 --> 00:08:36.899
为什么行呢

00:08:36.899 --> 00:08:38.180
因为我们说

00:08:38.180 --> 00:08:39.240
view组件

00:08:39.240 --> 00:08:41.300
本质上是一个

00:08:41.300 --> 00:08:42.120
js对象

00:08:42.120 --> 00:08:42.779
刚才已经说了

00:08:42.779 --> 00:08:43.460
对吧

00:08:43.460 --> 00:08:44.100
它是一个对象

00:08:44.100 --> 00:08:45.300
但是呢

00:08:45.300 --> 00:08:46.420
react组件

00:08:46.420 --> 00:08:47.840
不是说hox啊

00:08:47.840 --> 00:08:50.019
就是非hox

00:08:50.019 --> 00:08:51.860
它本质上

00:08:51.860 --> 00:08:53.620
是一个class

00:08:53.620 --> 00:08:55.279
当前如果你不知道

00:08:55.279 --> 00:08:56.000
这个react组件

00:08:56.000 --> 00:08:56.580
是不是class

00:08:56.580 --> 00:08:57.280
这个没关系

00:08:57.280 --> 00:08:58.139
你知道

00:08:58.139 --> 00:08:59.400
esu的class就可以

00:08:59.400 --> 00:09:01.259
我这要说的是什么呢

00:09:01.259 --> 00:09:02.240
就是我们说过

00:09:02.240 --> 00:09:03.620
针对一个对象来说

00:09:03.620 --> 00:09:04.879
它的方法

00:09:04.879 --> 00:09:05.960
不能用相当函数

00:09:05.960 --> 00:09:08.020
但是对于class来说

00:09:08.020 --> 00:09:09.600
这就不一定了

00:09:09.600 --> 00:09:11.000
比如我们定一个class

00:09:11.000 --> 00:09:13.040
然后在class里面

00:09:13.040 --> 00:09:13.700
constructor

00:09:13.700 --> 00:09:15.800
name

00:09:15.800 --> 00:09:17.920
age

00:09:17.920 --> 00:09:19.800
list.name

00:09:19.800 --> 00:09:20.400
复制称

00:09:20.400 --> 00:09:20.900
name

00:09:20.900 --> 00:09:22.800
list.age

00:09:22.800 --> 00:09:24.100
复制称

00:09:24.100 --> 00:09:24.540
age

00:09:24.540 --> 00:09:25.820
然后这里面

00:09:25.820 --> 00:09:26.379
我们看一下

00:09:26.379 --> 00:09:27.120
在这里面

00:09:27.120 --> 00:09:28.320
我们去使用

00:09:28.320 --> 00:09:29.439
箭头函数

00:09:29.439 --> 00:09:31.120
就在class里面

00:09:31.120 --> 00:09:31.939
去使用箭头函数

00:09:31.939 --> 00:09:33.419
没有问题了

00:09:33.419 --> 00:09:34.820
定义完之后呢

00:09:34.820 --> 00:09:35.659
我们直接去

00:09:35.659 --> 00:09:36.080
cost

00:09:36.080 --> 00:09:36.500
f

00:09:36.500 --> 00:09:36.820
乘

00:09:36.820 --> 00:09:37.159
new

00:09:37.159 --> 00:09:38.279
f

00:09:38.279 --> 00:09:38.519
o

00:09:38.519 --> 00:09:40.000
然后把这个

00:09:40.000 --> 00:09:42.019
信息传进去

00:09:42.019 --> 00:09:43.059
这个地方

00:09:43.059 --> 00:09:43.460
跟这个地方

00:09:43.460 --> 00:09:44.039
统一起来吧

00:09:44.039 --> 00:09:48.399
这样的话

00:09:48.399 --> 00:09:49.220
我们就可以去

00:09:49.220 --> 00:09:50.100
定用它这个函数

00:09:50.100 --> 00:09:51.320
这样的结果

00:09:51.320 --> 00:09:52.000
我们直接打印

00:09:52.000 --> 00:09:52.299
就可以

00:09:52.299 --> 00:09:56.980
f.getname

00:09:56.980 --> 00:09:58.000
大家看一下

00:09:58.000 --> 00:09:58.460
这个效果

00:09:58.460 --> 00:09:59.779
这个是可以的

00:09:59.779 --> 00:10:00.840
稍微打印出来

00:10:00.840 --> 00:10:02.659
所以这个是可以的

00:10:02.659 --> 00:10:03.340
就是注意啊

00:10:03.340 --> 00:10:03.820
对象里面

00:10:03.820 --> 00:10:04.340
有箭头函数

00:10:04.340 --> 00:10:06.460
是这个z是不对的

00:10:06.460 --> 00:10:07.799
但是在class里面

00:10:07.799 --> 00:10:08.419
用这种方式

00:10:08.419 --> 00:10:09.059
使用箭头函数

00:10:09.059 --> 00:10:10.620
这个z只向

00:10:10.620 --> 00:10:11.820
这个class实力

00:10:11.820 --> 00:10:12.259
本身

00:10:12.259 --> 00:10:13.120
只向这个f

00:10:13.120 --> 00:10:14.360
是没有问题的

00:10:14.360 --> 00:10:15.179
这个地方

00:10:15.179 --> 00:10:15.740
一定要注意

00:10:15.740 --> 00:10:17.039
所以我们也是通过

00:10:17.039 --> 00:10:17.679
这个view组件

00:10:17.679 --> 00:10:18.399
和react组件

00:10:18.399 --> 00:10:18.899
这个东西

00:10:18.899 --> 00:10:19.659
紧生出来的

00:10:19.659 --> 00:10:23.959
最后呢

00:10:23.959 --> 00:10:24.759
我们汇总一下

00:10:24.759 --> 00:10:26.019
第一个

00:10:26.019 --> 00:10:26.719
对象方法

00:10:26.719 --> 00:10:28.100
对象原型

00:10:28.100 --> 00:10:29.360
构造函数

00:10:29.360 --> 00:10:30.639
正在上下文的

00:10:30.639 --> 00:10:31.279
回调函数

00:10:31.279 --> 00:10:32.639
还有view

00:10:32.639 --> 00:10:33.120
是没有主题

00:10:33.120 --> 00:10:34.339
但是最后

00:10:34.339 --> 00:10:35.059
又要注意说

00:10:35.059 --> 00:10:36.659
在class里面

00:10:36.659 --> 00:10:37.279
我们可以

00:10:37.279 --> 00:10:37.919
用箭头函数

00:10:37.919 --> 00:10:39.000
虽然说

00:10:39.000 --> 00:10:39.679
我们这个

00:10:39.679 --> 00:10:40.219
不作为我们

00:10:40.219 --> 00:10:40.719
题目答案

00:10:40.719 --> 00:10:41.959
但是对比来看

00:10:41.959 --> 00:10:42.879
还是很值得学习

00:10:42.879 --> 00:10:43.579
很值得注意的

00:10:43.579 --> 00:10:44.559
要熟练

00:10:44.559 --> 00:10:45.279
用箭头函数

00:10:45.279 --> 00:10:46.480
但是也要

00:10:46.480 --> 00:10:47.360
对函数的z

00:10:47.360 --> 00:10:48.079
arguments

00:10:48.079 --> 00:10:49.100
要极其敏感

00:10:49.100 --> 00:10:50.560
特别是对于z

00:10:50.560 --> 00:10:51.600
特别特别是z

00:10:51.600 --> 00:10:52.500
也要说

00:10:52.500 --> 00:10:53.100
这个函数

00:10:53.100 --> 00:10:53.840
里面有z

00:10:53.840 --> 00:10:54.279
之后

00:10:54.279 --> 00:10:55.600
你要立马

00:10:55.600 --> 00:10:56.420
不能一个神经

00:10:56.420 --> 00:10:58.000
立马敏感起来

00:10:58.000 --> 00:10:58.420
这个东西

00:10:58.420 --> 00:10:58.879
和箭头函数

00:10:58.879 --> 00:10:59.300
有关系

00:10:59.300 --> 00:11:00.000
我们应该

00:11:00.000 --> 00:11:00.820
应该用箭头函数

00:11:00.820 --> 00:11:01.899
会不会有什么影响

00:11:01.899 --> 00:11:02.960
工程师

00:11:02.960 --> 00:11:03.740
优秀程序员

00:11:03.740 --> 00:11:05.620
要对这种信息

00:11:05.620 --> 00:11:07.320
要有自己的敏感度

00:11:07.320 --> 00:11:08.560
你要有能知道

00:11:08.560 --> 00:11:09.399
这个信息

00:11:09.399 --> 00:11:11.240
它和什么信息相关

00:11:11.240 --> 00:11:12.860
然后极其会引发

00:11:12.860 --> 00:11:13.980
什么样的风险和问题

00:11:13.980 --> 00:11:15.019
敏感要有

00:11:15.019 --> 00:11:16.399
就像我们之前讲的

00:11:16.399 --> 00:11:17.860
你要写一个算法

00:11:17.860 --> 00:11:19.060
你一定要有

00:11:19.060 --> 00:11:20.440
这个时间复杂度的敏感度

00:11:20.440 --> 00:11:21.919
你要有一个循环

00:11:21.919 --> 00:11:24.279
知道它和时间复杂度有关系

00:11:24.279 --> 00:11:25.680
你要操作一个数组

00:11:25.680 --> 00:11:26.779
你要知道

00:11:26.779 --> 00:11:27.320
这个数组

00:11:27.320 --> 00:11:27.919
如果操作不当

00:11:27.919 --> 00:11:28.919
会一定严重影响性能

00:11:28.919 --> 00:11:29.919
所以说

00:11:29.919 --> 00:11:31.300
这个程序员的敏感度

00:11:31.300 --> 00:11:32.560
就是自己的专业程度

00:11:32.560 --> 00:11:34.660
传组Vue组件是GS对象

00:11:34.660 --> 00:11:36.620
传组Rect组件是class

00:11:36.620 --> 00:11:37.440
两者不同

00:11:37.440 --> 00:11:38.700
在对象里面

00:11:38.700 --> 00:11:39.220
我们就看到

00:11:39.220 --> 00:11:39.900
好像说得慎重

00:11:39.900 --> 00:11:41.220
但在class里面

00:11:41.220 --> 00:11:42.140
我们是可以用的

00:11:42.139 --> 00:11:43.340
优优优独播剧场——YoYo Television Series Exclusive

