WEBVTT

00:00:00.000 --> 00:00:00.880
我们再说节流

00:00:00.880 --> 00:00:03.980
节流呢是节省交互沟通

00:00:03.980 --> 00:00:06.179
这个流不要离也不流量啊

00:00:06.179 --> 00:00:07.799
因为这个和流量没有关系

00:00:07.799 --> 00:00:09.900
我们一般说的流量是网络流量

00:00:09.900 --> 00:00:10.220
对吧

00:00:10.220 --> 00:00:11.359
这个和流量没有关系

00:00:11.359 --> 00:00:13.700
流是交互和沟通

00:00:13.700 --> 00:00:15.820
就是节流

00:00:15.820 --> 00:00:16.879
就是别急

00:00:16.879 --> 00:00:17.940
一个一个来

00:00:17.940 --> 00:00:19.480
按照时间节奏来

00:00:19.480 --> 00:00:23.199
就是先一个再一个再一个卖点

00:00:23.199 --> 00:00:25.640
如果说这个还没有完

00:00:25.640 --> 00:00:26.660
还没有开始

00:00:26.660 --> 00:00:27.539
或者说还没有结束

00:00:27.539 --> 00:00:28.280
你就先来

00:00:28.280 --> 00:00:28.859
你就插队

00:00:28.859 --> 00:00:30.140
那不好意思

00:00:30.140 --> 00:00:31.439
那你插队无效

00:00:31.439 --> 00:00:33.340
比如说我们在

00:00:33.340 --> 00:00:34.700
drag和scroll的时候

00:00:34.700 --> 00:00:36.840
因为drag和scroll是很快的

00:00:36.840 --> 00:00:38.359
像拖拽滚动这些

00:00:38.359 --> 00:00:39.780
他触发回来的时候

00:00:39.780 --> 00:00:41.980
可以设置一个时间间隔

00:00:41.980 --> 00:00:43.480
或者说可以设置一个节流

00:00:43.480 --> 00:00:45.799
因为这个时候不能防抖啊

00:00:45.799 --> 00:00:47.659
比如说我们在滚动

00:00:47.659 --> 00:00:48.439
在拖拽的时候

00:00:48.439 --> 00:00:49.159
在过程中

00:00:49.159 --> 00:00:50.879
我们需要得到一些信息

00:00:50.879 --> 00:00:52.340
这个时候你不能用防抖

00:00:52.340 --> 00:00:53.659
如果防抖的话是这样

00:00:53.659 --> 00:00:56.359
是拖拽和滚动完了之后

00:00:56.359 --> 00:00:57.239
才怎么怎么样

00:00:57.239 --> 00:00:58.280
而节流呢是

00:00:58.280 --> 00:00:59.560
我拖拽过程中

00:00:59.560 --> 00:01:01.160
就要触发一些回调

00:01:01.160 --> 00:01:01.679
但是呢

00:01:01.679 --> 00:01:03.219
这个回调不能说

00:01:03.219 --> 00:01:04.420
特别特别的频繁

00:01:04.420 --> 00:01:04.840
没必要

00:01:04.840 --> 00:01:05.120
对吧

00:01:05.120 --> 00:01:06.060
比如说我们一秒号

00:01:06.060 --> 00:01:07.260
触发一个就可以了

00:01:07.260 --> 00:01:09.340
我们可以做一个代码演示

00:01:09.340 --> 00:01:11.320
我建立了一个throttle

00:01:11.320 --> 00:01:15.280
这个throttle就是节流的意思

00:01:15.280 --> 00:01:17.500
在这我们可以把这个节流的函数

00:01:17.500 --> 00:01:18.800
给大家简单写一下

00:01:18.800 --> 00:01:21.620
throttle也是一个函数

00:01:21.620 --> 00:01:25.500
然后delete等于比如说

00:01:25.500 --> 00:01:26.100
默认是100

00:01:26.100 --> 00:01:30.260
还是来个定时器的一个记录

00:01:30.260 --> 00:01:31.900
timer数字成0

00:01:31.900 --> 00:01:34.120
然后return一个函数

00:01:34.120 --> 00:01:34.340
对吧

00:01:34.340 --> 00:01:35.820
节流和防抖都是return一个函数

00:01:35.820 --> 00:01:37.820
就返回一个函数

00:01:37.820 --> 00:01:40.420
然后这个函数如果timer有

00:01:40.420 --> 00:01:41.480
证明什么

00:01:41.480 --> 00:01:43.100
如果timer有

00:01:43.100 --> 00:01:44.540
那就直接return

00:01:44.540 --> 00:01:46.300
就是如果timer有值的话

00:01:46.300 --> 00:01:49.420
证明当前已经有任务在排队中了

00:01:49.420 --> 00:01:50.340
你就不要着急了

00:01:50.340 --> 00:01:51.939
你就先回去等着吧

00:01:51.939 --> 00:01:57.680
然后把timer复制成settimeout

00:01:57.680 --> 00:02:00.400
这里面我们来一个函数

00:02:00.400 --> 00:02:01.960
这个间隔呢

00:02:01.960 --> 00:02:03.200
就是这个delete

00:02:03.200 --> 00:02:05.000
好

00:02:05.000 --> 00:02:07.540
这里面去执行这个函数

00:02:07.540 --> 00:02:08.960
fn.apply

00:02:08.960 --> 00:02:10.219
然后this

00:02:10.219 --> 00:02:13.840
arguments

00:02:13.840 --> 00:02:14.659
ok

00:02:14.659 --> 00:02:18.159
然后这个时候再把timer复制成空

00:02:18.159 --> 00:02:19.659
好

00:02:19.659 --> 00:02:20.439
这就结束了

00:02:20.439 --> 00:02:21.159
其实很好理解

00:02:21.159 --> 00:02:24.159
大家不管是理解这个防抖还是节流

00:02:24.159 --> 00:02:26.000
大家可以这么一种解读方式

00:02:26.000 --> 00:02:26.800
就是在这里面呢

00:02:26.800 --> 00:02:29.139
我们先可以先去解读这个

00:02:29.139 --> 00:02:30.859
比如timer复制成一个settimeout

00:02:30.859 --> 00:02:31.659
然后加一个delete

00:02:31.659 --> 00:02:32.859
然后加一个函数的执行

00:02:32.859 --> 00:02:33.639
对吧

00:02:33.639 --> 00:02:34.400
就是说

00:02:34.400 --> 00:02:36.019
我每次执行这个函数呢

00:02:36.019 --> 00:02:37.240
我都用timer记录一下

00:02:37.240 --> 00:02:39.699
如果说你下次这个还没有完事

00:02:39.699 --> 00:02:40.579
你完事之后

00:02:40.579 --> 00:02:41.620
他timer已经复制成0了

00:02:41.620 --> 00:02:41.859
对吧

00:02:41.859 --> 00:02:43.819
如果说他还没有完事的情况下

00:02:43.819 --> 00:02:45.479
你再强行的希望想去插队

00:02:45.479 --> 00:02:46.079
想去着急

00:02:46.079 --> 00:02:46.960
那不好意思

00:02:46.960 --> 00:02:47.900
如果有timer制

00:02:47.900 --> 00:02:49.159
那你就先回去先等着

00:02:49.159 --> 00:02:50.360
反正我不理你

00:02:50.360 --> 00:02:50.719
对不对

00:02:50.719 --> 00:02:52.879
这就是节流的一种实现方式

00:02:52.879 --> 00:02:55.560
比如说我们这儿加一个todrive的一个例子

00:02:55.560 --> 00:02:56.640
我们加一个div

00:02:56.640 --> 00:02:59.680
div里面我们写一个todrive

00:02:59.680 --> 00:03:02.960
然后这个div加一个id

00:03:02.960 --> 00:03:05.040
div1

00:03:05.040 --> 00:03:06.219
todrive呢

00:03:06.219 --> 00:03:07.260
其实有个很好的实现

00:03:07.260 --> 00:03:09.520
就是这个dragable等于true

00:03:09.520 --> 00:03:10.319
好

00:03:10.319 --> 00:03:11.640
我们为了方便看呢

00:03:11.640 --> 00:03:12.840
我们再加一个style

00:03:12.840 --> 00:03:16.520
style比如说base等于

00:03:16.520 --> 00:03:18.219
100px

00:03:18.219 --> 00:03:22.439
100px

00:03:22.439 --> 00:03:23.040
100px

00:03:23.040 --> 00:03:23.939
再加个空格

00:03:23.939 --> 00:03:28.080
然后height等于50px

00:03:28.080 --> 00:03:29.980
background color

00:03:29.980 --> 00:03:31.620
比如说加一个灰色

00:03:31.620 --> 00:03:32.780
好

00:03:32.780 --> 00:03:36.360
然后这样就可以了

00:03:36.360 --> 00:03:37.560
我们可以再加个panding

00:03:37.560 --> 00:03:40.080
panding加上会更美观一些

00:03:40.080 --> 00:03:41.040
保存

00:03:41.039 --> 00:03:42.939
这个时候我们刷新

00:03:42.939 --> 00:03:44.199
这个时候这个就cortodrive

00:03:44.199 --> 00:03:44.819
大家看对吧

00:03:44.819 --> 00:03:45.539
cortodrive了

00:03:45.539 --> 00:03:46.519
cortodrive

00:03:46.519 --> 00:03:50.259
然后我们去把这个cortodrive的这个回调给它

00:03:50.259 --> 00:03:51.879
写一下

00:03:51.879 --> 00:03:52.599
div1

00:03:52.599 --> 00:03:53.120
if称

00:03:53.120 --> 00:03:54.159
div1

00:03:54.159 --> 00:03:58.159
div1

00:03:58.159 --> 00:03:58.400
对吧

00:03:58.400 --> 00:04:00.819
然后div1

00:04:00.819 --> 00:04:02.199
ad event listener

00:04:02.199 --> 00:04:05.759
兼听我们这个drag这个函数

00:04:05.759 --> 00:04:07.159
这个时候呢

00:04:07.159 --> 00:04:09.180
我们可以在这儿

00:04:09.180 --> 00:04:10.939
兼听它drag的回调

00:04:10.939 --> 00:04:12.599
然后去打印一下

00:04:12.599 --> 00:04:16.540
鼠标的位置

00:04:16.540 --> 00:04:22.620
我们用e.offsetx和e.offsety去打印所谓的位置

00:04:22.620 --> 00:04:23.199
好

00:04:23.199 --> 00:04:24.439
这儿我们还没有用到throught

00:04:24.439 --> 00:04:24.740
对吧

00:04:24.740 --> 00:04:25.439
没有用到节流

00:04:25.439 --> 00:04:26.019
好

00:04:26.019 --> 00:04:27.040
这个时候我们刷新

00:04:27.040 --> 00:04:28.139
然后我们拖来的时候

00:04:28.139 --> 00:04:28.579
大家看

00:04:28.579 --> 00:04:29.779
非常非常快

00:04:29.779 --> 00:04:30.240
大家看

00:04:30.240 --> 00:04:30.480
对吧

00:04:30.480 --> 00:04:31.199
出发的非常快

00:04:31.199 --> 00:04:33.120
就是你没挪一点点

00:04:33.120 --> 00:04:33.879
就会出发非常快

00:04:33.879 --> 00:04:35.240
这样的话是不是太着急了

00:04:35.240 --> 00:04:36.800
一点都没有节奏

00:04:36.800 --> 00:04:37.699
一点都没有节流

00:04:37.699 --> 00:04:39.120
那怎么办呢

00:04:39.120 --> 00:04:39.420
哎

00:04:39.420 --> 00:04:39.759
好吧

00:04:39.759 --> 00:04:42.420
我们在这个函数外面包裹一层throught

00:04:42.420 --> 00:04:44.340
好

00:04:44.340 --> 00:04:45.080
包裹一层throught

00:04:45.080 --> 00:04:46.540
然后这个throught呢

00:04:46.540 --> 00:04:48.720
我们可以在这儿再加个参数

00:04:48.720 --> 00:04:49.640
就是delete参数

00:04:49.640 --> 00:04:50.960
这个delete参数不加也行

00:04:50.960 --> 00:04:51.780
不加反正就是100

00:04:51.780 --> 00:04:52.680
你如果想改的话

00:04:52.680 --> 00:04:53.340
你就加上别的

00:04:53.340 --> 00:04:54.199
比如说改成个200

00:04:54.199 --> 00:04:54.500
就可以

00:04:54.500 --> 00:04:55.920
一般的这个节流呢

00:04:55.920 --> 00:04:57.220
我们用100就好

00:04:57.220 --> 00:04:58.740
因为如果是太慢了呢

00:04:58.740 --> 00:05:00.160
它会显得很卡顿

00:05:00.160 --> 00:05:01.139
我们加上之后

00:05:01.139 --> 00:05:02.060
我们再看下这个效果

00:05:02.060 --> 00:05:02.400
刷新

00:05:02.400 --> 00:05:03.500
大家看

00:05:03.500 --> 00:05:04.439
我拖的时候

00:05:04.439 --> 00:05:06.180
是不是明显就好很多了

00:05:06.180 --> 00:05:06.819
就是有节奏了

00:05:06.819 --> 00:05:07.500
对吧

00:05:07.500 --> 00:05:07.980
一个一个来

00:05:07.980 --> 00:05:08.580
对吧

00:05:08.580 --> 00:05:09.700
那如果我再

00:05:09.700 --> 00:05:10.980
再严格一些

00:05:10.980 --> 00:05:12.900
比如说我加个300毫秒

00:05:12.900 --> 00:05:13.819
这个时候保存

00:05:13.819 --> 00:05:14.640
刷新

00:05:14.640 --> 00:05:16.720
大家看

00:05:16.720 --> 00:05:18.960
是不是就更慢了

00:05:18.960 --> 00:05:21.379
对

00:05:21.379 --> 00:05:22.300
300就有点慢了

00:05:22.300 --> 00:05:23.420
一般情况下

00:05:23.420 --> 00:05:25.140
就是用这个100

00:05:25.140 --> 00:05:27.680
这是体验比较好的

00:05:27.680 --> 00:05:29.060
就是你看着又快

00:05:29.060 --> 00:05:29.460
但是呢

00:05:29.460 --> 00:05:32.200
又不像之前那么的频繁

00:05:32.200 --> 00:05:34.560
太频繁了之后

00:05:34.560 --> 00:05:35.460
毕竟会影响性能

00:05:35.460 --> 00:05:35.660
对吧

00:05:35.660 --> 00:05:36.340
或者影响体验

00:05:36.340 --> 00:05:37.120
或者说

00:05:37.120 --> 00:05:38.360
甚至会带来一些卡顿

00:05:38.360 --> 00:05:40.160
这就看你回到里面

00:05:40.160 --> 00:05:40.879
做什么事情了

00:05:40.879 --> 00:05:43.080
OK

00:05:43.080 --> 00:05:44.699
这就是一个节流

00:05:44.699 --> 00:05:45.819
就是慢慢来

00:05:45.819 --> 00:05:46.300
别着急

00:05:46.300 --> 00:05:46.800
别插队

00:05:46.800 --> 00:05:47.420
一个一个来

00:05:47.420 --> 00:05:48.560
一个来完之后

00:05:48.560 --> 00:05:49.780
再来第二个

00:05:49.780 --> 00:05:50.020
对吧

00:05:50.020 --> 00:05:51.319
这个和防抖就不一样了

00:05:51.319 --> 00:05:52.560
对吧

00:05:52.560 --> 00:05:53.080
看这个图

00:05:53.080 --> 00:05:53.980
这个图和防抖

00:05:53.980 --> 00:05:55.199
这个图是一样的

00:05:55.199 --> 00:05:57.120
一个意思

00:05:57.120 --> 00:05:58.780
就上面是

00:05:58.780 --> 00:05:59.480
用户的输入

00:05:59.480 --> 00:06:00.520
中间是这个

00:06:00.520 --> 00:06:01.540
sort接流

00:06:01.540 --> 00:06:01.980
大家看

00:06:01.980 --> 00:06:02.480
一个时钟

00:06:02.480 --> 00:06:02.860
一个时钟

00:06:02.860 --> 00:06:03.939
按节路来

00:06:03.939 --> 00:06:04.620
对吧

00:06:04.620 --> 00:06:05.600
然后下面是输出

00:06:05.600 --> 00:06:07.780
我们输入了1之后

00:06:07.780 --> 00:06:09.200
这个1要等待执行

00:06:09.200 --> 00:06:10.380
那你再输入2

00:06:10.380 --> 00:06:10.760
输入3

00:06:10.760 --> 00:06:11.080
输入4

00:06:11.080 --> 00:06:11.540
输入5

00:06:11.540 --> 00:06:11.920
抱歉

00:06:11.920 --> 00:06:12.620
你想插队

00:06:12.620 --> 00:06:14.360
那我就不管你

00:06:14.360 --> 00:06:14.980
总之

00:06:14.980 --> 00:06:15.840
我隔一段时间

00:06:15.840 --> 00:06:17.220
我就先执行1

00:06:17.220 --> 00:06:17.800
对吧

00:06:17.800 --> 00:06:18.580
我先执行1

00:06:18.580 --> 00:06:19.940
然后我隔一段时间

00:06:19.940 --> 00:06:21.020
我再去执行另一个

00:06:21.020 --> 00:06:22.860
这个时候就慢慢等待

00:06:22.860 --> 00:06:23.820
你中间再想插队

00:06:23.820 --> 00:06:24.060
不行

00:06:24.060 --> 00:06:25.440
比如说又来个1

00:06:25.440 --> 00:06:26.020
我就执行

00:06:26.020 --> 00:06:26.900
然后再加

00:06:26.900 --> 00:06:27.640
再进行2

00:06:27.640 --> 00:06:28.120
什么的

00:06:28.120 --> 00:06:29.060
这个不行

00:06:29.060 --> 00:06:30.200
然后来个4

00:06:30.200 --> 00:06:30.660
执行

00:06:30.660 --> 00:06:31.860
来个2

00:06:31.860 --> 00:06:32.220
执行

00:06:32.220 --> 00:06:33.640
它是有时间间隔的

00:06:33.640 --> 00:06:34.680
它是在处理过程中的

00:06:34.680 --> 00:06:37.980
大家看输入是没有任何规律的

00:06:37.980 --> 00:06:38.459
对吧

00:06:38.459 --> 00:06:39.019
没有任何规律

00:06:39.019 --> 00:06:39.459
有时候快

00:06:39.459 --> 00:06:39.959
有时候慢

00:06:39.959 --> 00:06:41.300
反正一直不停的输入

00:06:41.300 --> 00:06:42.959
经过这个throttle的梳理之后

00:06:42.959 --> 00:06:44.459
就会按照有节奏

00:06:44.459 --> 00:06:45.180
有时间规律

00:06:45.180 --> 00:06:46.160
有时间节奏的方式

00:06:46.160 --> 00:06:48.500
去择择择择择择择择择出来

00:06:48.500 --> 00:06:50.519
择择出来一部分

00:06:50.519 --> 00:06:52.159
按照时间节奏的

00:06:52.159 --> 00:06:53.120
来去输出

00:06:53.120 --> 00:06:54.620
这就是这个throttle

00:06:54.620 --> 00:06:55.060
对吧

00:06:55.060 --> 00:06:57.039
我们可以再去对比一下

00:06:57.039 --> 00:06:57.620
这个debounce

00:06:57.620 --> 00:06:59.120
debounce和它不一样

00:06:59.120 --> 00:06:59.339
对吧

00:06:59.339 --> 00:07:00.000
debounce没有

00:07:00.000 --> 00:07:01.000
看那个结果

00:07:01.000 --> 00:07:02.259
它没有任何的时间规律

00:07:02.259 --> 00:07:04.799
就是debounce是防抖

00:07:04.799 --> 00:07:05.240
对吧

00:07:05.240 --> 00:07:06.240
你如果先抖

00:07:06.240 --> 00:07:07.479
然后那我先不管你

00:07:07.479 --> 00:07:08.219
反正等着

00:07:08.219 --> 00:07:09.620
然后12345

00:07:09.620 --> 00:07:11.379
到最后我来执行5

00:07:11.379 --> 00:07:11.839
大家注意

00:07:11.839 --> 00:07:13.240
throttle呢

00:07:13.240 --> 00:07:15.379
它是一开始就执行1

00:07:15.379 --> 00:07:15.759
对吧

00:07:15.759 --> 00:07:16.379
debounce呢

00:07:16.379 --> 00:07:17.599
是最后才执行5

00:07:17.599 --> 00:07:18.899
这两个是完全不一样的

00:07:18.899 --> 00:07:19.959
你可以把这两个图呢

00:07:19.960 --> 00:07:20.920
拷贝下来

00:07:20.920 --> 00:07:22.180
然后放在一块去对比一下

00:07:22.180 --> 00:07:23.240
这样会看得更好一些

00:07:23.240 --> 00:07:24.720
这是debounce的这个图

00:07:24.720 --> 00:07:27.780
然后我们再来对比一下

00:07:27.780 --> 00:07:29.320
这是throttle的这个图

00:07:29.320 --> 00:07:30.740
这两个是完全不一样的

00:07:30.740 --> 00:07:32.200
你如果能结合这两个图

00:07:32.200 --> 00:07:33.520
外加我们的代码

00:07:33.520 --> 00:07:35.160
把这两个结合起来

00:07:35.160 --> 00:07:37.780
然后再外加我们讲的那个场景

00:07:37.780 --> 00:07:39.720
把这三个结合起来

00:07:39.720 --> 00:07:40.980
那这个面试题

00:07:40.980 --> 00:07:42.240
你肯定是能过的

00:07:42.240 --> 00:07:42.840
没问题

00:07:42.840 --> 00:07:45.380
好答案

00:07:45.380 --> 00:07:48.860
节流是限制执行频率

00:07:48.860 --> 00:07:49.860
有节奏的执行

00:07:49.860 --> 00:07:50.600
防抖呢

00:07:50.600 --> 00:07:51.900
是限制执行次数

00:07:51.900 --> 00:07:53.300
多次密集的出发

00:07:53.300 --> 00:07:54.220
只执行一次

00:07:54.220 --> 00:07:55.660
这两个完全是不一样的

00:07:55.660 --> 00:07:55.980
对吧

00:07:55.980 --> 00:07:57.080
好

00:07:57.080 --> 00:07:58.520
节流关注过程

00:07:58.520 --> 00:08:00.120
防抖是关注结果

00:08:00.120 --> 00:08:00.759
对不对

00:08:00.759 --> 00:08:01.379
啊

00:08:01.379 --> 00:08:02.199
节流是关注过程

00:08:02.199 --> 00:08:03.040
这过程再怎么快

00:08:03.040 --> 00:08:03.840
我给他梳理一下

00:08:03.840 --> 00:08:04.819
有节奏就可以了

00:08:04.819 --> 00:08:06.180
防抖是关注结果

00:08:06.180 --> 00:08:06.819
就是你先输

00:08:06.819 --> 00:08:07.720
你先输入

00:08:07.720 --> 00:08:08.520
你先来了

00:08:08.520 --> 00:08:09.360
我先等着你

00:08:09.360 --> 00:08:10.220
什么时候你暂停

00:08:10.220 --> 00:08:11.300
什么时候你停止了

00:08:11.300 --> 00:08:12.319
我在执行结果

00:08:12.319 --> 00:08:12.900
对不对

00:08:12.900 --> 00:08:13.520
放重点

00:08:13.520 --> 00:08:15.080
一个是过程

00:08:15.080 --> 00:08:16.439
一个是结果

00:08:16.439 --> 00:08:17.719
这两个关注重点

00:08:17.719 --> 00:08:18.839
另外呢

00:08:18.839 --> 00:08:19.579
就是实际工作中

00:08:19.579 --> 00:08:20.980
你不要去自己去

00:08:20.980 --> 00:08:22.639
像我们这样去写

00:08:22.639 --> 00:08:23.620
节流和防抖的例子

00:08:23.620 --> 00:08:23.920
因为

00:08:23.920 --> 00:08:25.439
毕竟我们写的

00:08:25.439 --> 00:08:27.060
在某些极端情况下

00:08:27.060 --> 00:08:28.740
它有可能会触发一些问题

00:08:28.740 --> 00:08:29.699
所以说实际工作中

00:08:29.699 --> 00:08:30.740
你还是喜欢楼大使

00:08:30.740 --> 00:08:31.800
的节流和防抖

00:08:31.800 --> 00:08:32.879
是比较好一些的

00:08:32.879 --> 00:08:34.139
所以说不要去

00:08:34.139 --> 00:08:35.000
跟我们讲的

00:08:35.000 --> 00:08:36.299
阿里克斯是一样的

00:08:36.299 --> 00:08:37.720
不要去在实际工作中

00:08:37.720 --> 00:08:39.059
去请你的去造轮子

00:08:39.059 --> 00:08:39.940
但是你学习的时候

00:08:39.940 --> 00:08:40.600
可以造轮子

00:08:40.600 --> 00:08:41.419
对吧

00:08:41.419 --> 00:08:41.980
还是那句话

00:08:41.980 --> 00:08:43.200
工作是工作

00:08:43.200 --> 00:08:44.159
面试是面试

00:08:44.159 --> 00:08:44.759
这样个不要

00:08:44.759 --> 00:08:45.440
混在一块儿谈

